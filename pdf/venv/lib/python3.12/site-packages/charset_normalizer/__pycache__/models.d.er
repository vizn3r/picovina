##[pylyzer] failed /home/vizn3r/dev/dano-picovina/pdf/venv/lib/python3.12/site-packages/charset_normalizer/models.py 1748113092 12394
.___v_desugar_1: Never
.annotations: Never
.___v_desugar_2: Never
.aliases: Never
.___v_desugar_3: Never
.sha256: Never
.___v_desugar_4: Never
.dumps: Never
.___v_desugar_5: Never
.sub: Never
.___v_desugar_6: Never
.Any: Never
.Iterator: Never
.List: Never
.Tuple: Never
.___v_desugar_7 = pyimport "constant"
.constant = pyimport "constant"
.RE_POSSIBLE_ENCODING_INDICATION: Never
.TOO_BIG_SEQUENCE: Never
.___v_desugar_8 = pyimport "utils"
.utils = pyimport "utils"
.iana_name: (cp_name: Str, strict: Bool := Bool) -> Str
.is_multi_byte_encoding: (name: Str) -> Bool
.unicode_range: (character: Str) -> NoneType or Str
.CharsetMatch: ClassType
.CharsetMatch._encoding: Str
.CharsetMatch._output_payload: NoneType or global::Bytes
.CharsetMatch._mean_coherence_ratio: Float
.CharsetMatch._payload: global::Bytes
.CharsetMatch._string: NoneType or Str
.CharsetMatch._has_sig_or_bom: Bool
.CharsetMatch._mean_mess_ratio: Float
.CharsetMatch._languages: Never
.CharsetMatch._unicode_ranges: global::List!(Str, _: Nat) or NoneType
.CharsetMatch._leaves: global::List!(Never, _: Nat)
.CharsetMatch._output_encoding: NoneType or Str
.CharsetMatch._preemptive_declaration: NoneType or Str
.CharsetMatch.__call__: (payload: global::Bytes, guessed_encoding: Str, mean_mess_ratio: Float, has_sig_or_bom: Bool, languages: Obj, decoded_payload: NoneType or Str := NoneType or Str, preemptive_declaration: NoneType or Str := NoneType or Str) -> models.CharsetMatch
.CharsetMatch.__eq__: (self: models.CharsetMatch, other: Obj) -> Bool
.CharsetMatch.__lt__: (self: models.CharsetMatch, other: Obj) -> Bool
.CharsetMatch.multi_byte_usage : (self: models.CharsetMatch) -> Float
.CharsetMatch.multi_byte_usage: Float
.CharsetMatch.__str__: (self: models.CharsetMatch) -> Str
.CharsetMatch.__repr__: (self: models.CharsetMatch) -> Str
.CharsetMatch.add_submatch: (self: models.CharsetMatch, other: models.CharsetMatch) -> NoneType
.CharsetMatch.encoding : (self: models.CharsetMatch) -> Str
.CharsetMatch.encoding: Str
.CharsetMatch.encoding_aliases : (self: models.CharsetMatch) -> global::List!(Str, _: Nat)
.CharsetMatch.encoding_aliases: global::List!(Str, _: Nat)
.CharsetMatch.bom : (self: models.CharsetMatch) -> Bool
.CharsetMatch.bom: Bool
.CharsetMatch.byte_order_mark : (self: models.CharsetMatch) -> Bool
.CharsetMatch.byte_order_mark: Bool
.CharsetMatch.languages : (self: models.CharsetMatch) -> global::List!(Str, _: Nat)
.CharsetMatch.languages: global::List!(Str, _: Nat)
.CharsetMatch.language : (self: models.CharsetMatch) -> Str
.CharsetMatch.language: Str
.CharsetMatch.chaos : (self: models.CharsetMatch) -> Float
.CharsetMatch.chaos: Float
.CharsetMatch.coherence : (self: models.CharsetMatch) -> Float
.CharsetMatch.coherence: Float
.CharsetMatch.percent_chaos : (self: models.CharsetMatch) -> Float
.CharsetMatch.percent_chaos: Float
.CharsetMatch.percent_coherence : (self: models.CharsetMatch) -> Float
.CharsetMatch.percent_coherence: Float
.CharsetMatch.raw : (self: models.CharsetMatch) -> global::Bytes
.CharsetMatch.raw: global::Bytes
.CharsetMatch.submatch : (self: models.CharsetMatch) -> global::List!(models.CharsetMatch, _: Nat)
.CharsetMatch.submatch: global::List!(models.CharsetMatch, _: Nat)
.CharsetMatch.has_submatch : (self: models.CharsetMatch) -> Bool
.CharsetMatch.has_submatch: Bool
.CharsetMatch.alphabets : (self: models.CharsetMatch) -> global::List!(Str, _: Nat)
.CharsetMatch.alphabets: global::List!(Str, _: Nat)
.CharsetMatch.could_be_from_charset : (self: models.CharsetMatch) -> global::List!(Str, _: Nat)
.CharsetMatch.could_be_from_charset: global::List!(Str, _: Nat)
.CharsetMatch.output: (self: models.CharsetMatch, encoding: Str := Str) -> global::Bytes
.CharsetMatch.fingerprint : (self: models.CharsetMatch) -> Str
.CharsetMatch.fingerprint: Str

.CharsetMatches: ClassType
.CharsetMatches._results: global::List!(models.CharsetMatch, _: Nat)
.CharsetMatches.__call__: (results: NoneType or global::List!(models.CharsetMatch, _: Nat) := NoneType or global::List!(models.CharsetMatch, _: Nat)) -> models.CharsetMatches
.CharsetMatches.__iter__: (self: models.CharsetMatches) -> global::Iterator(models.CharsetMatch)
.CharsetMatches.__getitem__: (self: models.CharsetMatches, item: Int or Str) -> models.CharsetMatch
.CharsetMatches.__len__: (self: models.CharsetMatches) -> Int
.CharsetMatches.__bool__: (self: models.CharsetMatches) -> Bool
.CharsetMatches.append: (self: models.CharsetMatches, item: models.CharsetMatch) -> NoneType
.CharsetMatches.best: (self: models.CharsetMatches) -> models.CharsetMatch or NoneType
.CharsetMatches.first: (self: models.CharsetMatches) -> models.CharsetMatch or NoneType

.CoherenceMatch: Never
.CoherenceMatches: Never
.CliDetectionResult: ClassType
.CliDetectionResult.language: Str
.CliDetectionResult.chaos: Float
.CliDetectionResult.alternative_encodings: global::List!(Str, _: Nat)
.CliDetectionResult.coherence: Float
.CliDetectionResult.is_preferred: Bool
.CliDetectionResult.encoding_aliases: global::List!(Str, _: Nat)
.CliDetectionResult.encoding: NoneType or Str
.CliDetectionResult.alphabets: global::List!(Str, _: Nat)
.CliDetectionResult.unicode_path: NoneType or Str
.CliDetectionResult.path: Str
.CliDetectionResult.has_sig_or_bom: Bool
.CliDetectionResult.__call__: (path: Str, encoding: NoneType or Str, encoding_aliases: global::List!(Str, _: Nat), alternative_encodings: global::List!(Str, _: Nat), language: Str, alphabets: global::List!(Str, _: Nat), has_sig_or_bom: Bool, chaos: Float, coherence: Float, unicode_path: NoneType or Str, is_preferred: Bool) -> models.CliDetectionResult
.CliDetectionResult.__dict__ : Never
.CliDetectionResult.__dict__: Never
.CliDetectionResult.to_json: (self: models.CliDetectionResult) -> Str


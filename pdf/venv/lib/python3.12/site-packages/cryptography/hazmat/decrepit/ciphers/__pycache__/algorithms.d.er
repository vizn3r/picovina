##[pylyzer] failed /home/vizn3r/dev/dano-picovina/pdf/venv/lib/python3.12/site-packages/cryptography/hazmat/decrepit/ciphers/algorithms.py 1748113092 2520
.___v_desugar_1: Never
.annotations: Never
.___v_desugar_2 = pyimport "_cipheralgorithm"
._cipheralgorithm = pyimport "_cipheralgorithm"
.BlockCipherAlgorithm: {cryptography.hazmat.primitives._cipheralgorithm.BlockCipherAlgorithm}
.CipherAlgorithm: {cryptography.hazmat.primitives._cipheralgorithm.CipherAlgorithm}
._verify_key_size: (algorithm: cryptography.hazmat.primitives._cipheralgorithm.CipherAlgorithm, key: Obj) -> Never
.ARC4: ClassType
cryptography = pyimport "cryptography"
.ARC4 <: cryptography.hazmat.primitives._cipheralgorithm.CipherAlgorithm
.ARC4.key: global::Bytes
.ARC4.__call__: (key: global::Bytes) -> cryptography.hazmat.decrepit.ciphers.algorithms.ARC4
.ARC4.name: {"RC4"}
.ARC4.key_sizes: global::FrozenSet({80, 256, 40, 56, 128, 160, 192, 64})
.ARC4.key_size : (self: cryptography.hazmat.decrepit.ciphers.algorithms.ARC4) -> Int
.ARC4.key_size: Int

.TripleDES: ClassType
.TripleDES <: cryptography.hazmat.primitives._cipheralgorithm.BlockCipherAlgorithm
.TripleDES.key: global::Bytes
.TripleDES.__call__: (key: global::Bytes) -> cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES
.TripleDES.name: {"3DES"}
.TripleDES.block_size: {64}
.TripleDES.key_sizes: global::FrozenSet({64, 128, 192})
.TripleDES.key_size : (self: cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES) -> Int
.TripleDES.key_size: Int

.Blowfish: ClassType
.Blowfish <: cryptography.hazmat.primitives._cipheralgorithm.BlockCipherAlgorithm
.Blowfish.key: global::Bytes
.Blowfish.__call__: (key: global::Bytes) -> cryptography.hazmat.decrepit.ciphers.algorithms.Blowfish
.Blowfish.name: {"Blowfish"}
.Blowfish.block_size: {64}
.Blowfish.key_sizes: global::FrozenSet({Type_v_global_10: Int | (Type_v_global_10 >= 32) and (Type_v_global_10 <= pred(449))})
.Blowfish.key_size : (self: cryptography.hazmat.decrepit.ciphers.algorithms.Blowfish) -> Int
.Blowfish.key_size: Int

.CAST5: ClassType
.CAST5 <: cryptography.hazmat.primitives._cipheralgorithm.BlockCipherAlgorithm
.CAST5.key: global::Bytes
.CAST5.__call__: (key: global::Bytes) -> cryptography.hazmat.decrepit.ciphers.algorithms.CAST5
.CAST5.name: {"CAST5"}
.CAST5.block_size: {64}
.CAST5.key_sizes: global::FrozenSet({Type_v_global_10: Int | (Type_v_global_10 >= 40) and (Type_v_global_10 <= pred(129))})
.CAST5.key_size : (self: cryptography.hazmat.decrepit.ciphers.algorithms.CAST5) -> Int
.CAST5.key_size: Int

.SEED: ClassType
.SEED <: cryptography.hazmat.primitives._cipheralgorithm.BlockCipherAlgorithm
.SEED.key: global::Bytes
.SEED.__call__: (key: global::Bytes) -> cryptography.hazmat.decrepit.ciphers.algorithms.SEED
.SEED.name: {"SEED"}
.SEED.block_size: {128}
.SEED.key_sizes: global::FrozenSet({128})
.SEED.key_size : (self: cryptography.hazmat.decrepit.ciphers.algorithms.SEED) -> Int
.SEED.key_size: Int

.IDEA: ClassType
.IDEA <: cryptography.hazmat.primitives._cipheralgorithm.BlockCipherAlgorithm
.IDEA.key: global::Bytes
.IDEA.__call__: (key: global::Bytes) -> cryptography.hazmat.decrepit.ciphers.algorithms.IDEA
.IDEA.name: {"IDEA"}
.IDEA.block_size: {64}
.IDEA.key_sizes: global::FrozenSet({128})
.IDEA.key_size : (self: cryptography.hazmat.decrepit.ciphers.algorithms.IDEA) -> Int
.IDEA.key_size: Int

.RC2: ClassType
.RC2 <: cryptography.hazmat.primitives._cipheralgorithm.BlockCipherAlgorithm
.RC2.key: global::Bytes
.RC2.__call__: (key: global::Bytes) -> cryptography.hazmat.decrepit.ciphers.algorithms.RC2
.RC2.name: {"RC2"}
.RC2.block_size: {64}
.RC2.key_sizes: global::FrozenSet({128})
.RC2.key_size : (self: cryptography.hazmat.decrepit.ciphers.algorithms.RC2) -> Int
.RC2.key_size: Int


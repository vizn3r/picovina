##[pylyzer] failed /home/vizn3r/dev/dano-picovina/pdf/venv/lib/python3.12/site-packages/cryptography/hazmat/primitives/asymmetric/ec.py 1748113092 12999
.___v_desugar_1: Never
.annotations: Never
.abc: Never

.typing: Never

.utils = pyimport "utils"

.___v_desugar_2 = pyimport "exceptions"
.exceptions = pyimport "exceptions"
.UnsupportedAlgorithm: {cryptography.exceptions.UnsupportedAlgorithm}
._Reasons: Never
.___v_desugar_3 = pyimport "_oid"
._oid = pyimport "_oid"
.ObjectIdentifier: Never
.___v_desugar_4: Never
.rust_openssl: Never
._serialization = pyimport "_serialization"
.hashes = pyimport "hashes"

.asym_utils = pyimport "utils"


.EllipticCurveOID: ClassType
.EllipticCurveOID.__call__: () -> cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveOID
.EllipticCurveOID.SECP192R1: Never
.EllipticCurveOID.SECP224R1: Never
.EllipticCurveOID.SECP256K1: Never
.EllipticCurveOID.SECP256R1: Never
.EllipticCurveOID.SECP384R1: Never
.EllipticCurveOID.SECP521R1: Never
.EllipticCurveOID.BRAINPOOLP256R1: Never
.EllipticCurveOID.BRAINPOOLP384R1: Never
.EllipticCurveOID.BRAINPOOLP512R1: Never
.EllipticCurveOID.SECT163K1: Never
.EllipticCurveOID.SECT163R2: Never
.EllipticCurveOID.SECT233K1: Never
.EllipticCurveOID.SECT233R1: Never
.EllipticCurveOID.SECT283K1: Never
.EllipticCurveOID.SECT283R1: Never
.EllipticCurveOID.SECT409K1: Never
.EllipticCurveOID.SECT409R1: Never
.EllipticCurveOID.SECT571K1: Never
.EllipticCurveOID.SECT571R1: Never

.EllipticCurve: ClassType
.EllipticCurve.__call__: () -> cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve
.EllipticCurve.name : (self: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve) -> Str
.EllipticCurve.name: Str
.EllipticCurve.key_size : (self: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve) -> Int
.EllipticCurve.key_size: Int
.EllipticCurve.group_order : (self: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve) -> Int
.EllipticCurve.group_order: Int

.EllipticCurveSignatureAlgorithm: ClassType
.EllipticCurveSignatureAlgorithm.__call__: () -> cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm
.EllipticCurveSignatureAlgorithm.algorithm : (self: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm) -> cryptography.hazmat.primitives.asymmetric.utils.Prehashed or cryptography.hazmat.primitives.hashes.HashAlgorithm
.EllipticCurveSignatureAlgorithm.algorithm: cryptography.hazmat.primitives.asymmetric.utils.Prehashed or cryptography.hazmat.primitives.hashes.HashAlgorithm

.EllipticCurvePrivateKey: ClassType
.EllipticCurvePrivateKey.__call__: () -> cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey
.EllipticCurvePrivateKey.exchange: (self: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey, algorithm: Obj, peer_public_key: Obj) -> global::Bytes
.EllipticCurvePrivateKey.public_key: (self: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey) -> Never
.EllipticCurvePrivateKey.curve : (self: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey) -> cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve
cryptography = pyimport "cryptography"
.EllipticCurvePrivateKey.curve: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve
.EllipticCurvePrivateKey.key_size : (self: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey) -> Int
.EllipticCurvePrivateKey.key_size: Int
.EllipticCurvePrivateKey.sign: (self: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey, data: Obj, signature_algorithm: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm) -> global::Bytes
.EllipticCurvePrivateKey.private_numbers: (self: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey) -> Never
.EllipticCurvePrivateKey.private_bytes: (self: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey, encoding: cryptography.hazmat.primitives._serialization.Encoding, format: cryptography.hazmat.primitives._serialization.PrivateFormat, encryption_algorithm: cryptography.hazmat.primitives._serialization.KeySerializationEncryption) -> global::Bytes
.EllipticCurvePrivateKey.__copy__: (self: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey) -> cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey

.EllipticCurvePrivateKeyWithSerialization: {cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey}

.EllipticCurvePublicKey: ClassType
.EllipticCurvePublicKey.__call__: () -> cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey
.EllipticCurvePublicKey.curve : (self: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey) -> cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve
.EllipticCurvePublicKey.curve: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve
.EllipticCurvePublicKey.key_size : (self: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey) -> Int
.EllipticCurvePublicKey.key_size: Int
.EllipticCurvePublicKey.public_numbers: (self: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey) -> Never
.EllipticCurvePublicKey.public_bytes: (self: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey, encoding: cryptography.hazmat.primitives._serialization.Encoding, format: cryptography.hazmat.primitives._serialization.PublicFormat) -> global::Bytes
.EllipticCurvePublicKey.verify: (self: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey, signature: Obj, data: Obj, signature_algorithm: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm) -> NoneType
.EllipticCurvePublicKey.from_encoded_point: (cls: Obj, curve: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve, data: global::Bytes) -> cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey
.EllipticCurvePublicKey.__eq__: (self: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey, other: Obj) -> Bool
.EllipticCurvePublicKey.__copy__: (self: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey) -> cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey

.EllipticCurvePublicKeyWithSerialization: {cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePublicKey}

.EllipticCurvePrivateNumbers: Never
.EllipticCurvePublicNumbers: Never
.SECT571R1: ClassType
.SECT571R1 <: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve
.SECT571R1.name: {"sect571r1"}
.SECT571R1.key_size: {570}
.SECT571R1.group_order: Never

.SECT409R1: ClassType
.SECT409R1 <: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve
.SECT409R1.name: {"sect409r1"}
.SECT409R1.key_size: {409}
.SECT409R1.group_order: Never

.SECT283R1: ClassType
.SECT283R1 <: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve
.SECT283R1.name: {"sect283r1"}
.SECT283R1.key_size: {283}
.SECT283R1.group_order: Never

.SECT233R1: ClassType
.SECT233R1 <: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve
.SECT233R1.name: {"sect233r1"}
.SECT233R1.key_size: {233}
.SECT233R1.group_order: Never

.SECT163R2: ClassType
.SECT163R2 <: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve
.SECT163R2.name: {"sect163r2"}
.SECT163R2.key_size: {163}
.SECT163R2.group_order: Never

.SECT571K1: ClassType
.SECT571K1 <: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve
.SECT571K1.name: {"sect571k1"}
.SECT571K1.key_size: {571}
.SECT571K1.group_order: Never

.SECT409K1: ClassType
.SECT409K1 <: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve
.SECT409K1.name: {"sect409k1"}
.SECT409K1.key_size: {409}
.SECT409K1.group_order: Never

.SECT283K1: ClassType
.SECT283K1 <: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve
.SECT283K1.name: {"sect283k1"}
.SECT283K1.key_size: {283}
.SECT283K1.group_order: Never

.SECT233K1: ClassType
.SECT233K1 <: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve
.SECT233K1.name: {"sect233k1"}
.SECT233K1.key_size: {233}
.SECT233K1.group_order: Never

.SECT163K1: ClassType
.SECT163K1 <: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve
.SECT163K1.name: {"sect163k1"}
.SECT163K1.key_size: {163}
.SECT163K1.group_order: Never

.SECP521R1: ClassType
.SECP521R1 <: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve
.SECP521R1.name: {"secp521r1"}
.SECP521R1.key_size: {521}
.SECP521R1.group_order: Never

.SECP384R1: ClassType
.SECP384R1 <: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve
.SECP384R1.name: {"secp384r1"}
.SECP384R1.key_size: {384}
.SECP384R1.group_order: Never

.SECP256R1: ClassType
.SECP256R1 <: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve
.SECP256R1.name: {"secp256r1"}
.SECP256R1.key_size: {256}
.SECP256R1.group_order: Never

.SECP256K1: ClassType
.SECP256K1 <: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve
.SECP256K1.name: {"secp256k1"}
.SECP256K1.key_size: {256}
.SECP256K1.group_order: Never

.SECP224R1: ClassType
.SECP224R1 <: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve
.SECP224R1.name: {"secp224r1"}
.SECP224R1.key_size: {224}
.SECP224R1.group_order: Never

.SECP192R1: ClassType
.SECP192R1 <: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve
.SECP192R1.name: {"secp192r1"}
.SECP192R1.key_size: {192}
.SECP192R1.group_order: Never

.BrainpoolP256R1: ClassType
.BrainpoolP256R1 <: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve
.BrainpoolP256R1.name: {"brainpoolP256r1"}
.BrainpoolP256R1.key_size: {256}
.BrainpoolP256R1.group_order: Never

.BrainpoolP384R1: ClassType
.BrainpoolP384R1 <: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve
.BrainpoolP384R1.name: {"brainpoolP384r1"}
.BrainpoolP384R1.key_size: {384}
.BrainpoolP384R1.group_order: Never

.BrainpoolP512R1: ClassType
.BrainpoolP512R1 <: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve
.BrainpoolP512R1.name: {"brainpoolP512r1"}
.BrainpoolP512R1.key_size: {512}
.BrainpoolP512R1.group_order: Never

._CURVE_TYPES: global::Dict!({Str: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve})
.ECDSA: ClassType
.ECDSA <: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm
.ECDSA._algorithm: Never
.ECDSA._deterministic_signing: Never
.ECDSA.__call__: (algorithm: cryptography.hazmat.primitives.asymmetric.utils.Prehashed or cryptography.hazmat.primitives.hashes.HashAlgorithm, deterministic_signing: Bool := Bool) -> cryptography.hazmat.primitives.asymmetric.ec.ECDSA
.ECDSA.algorithm : (self: cryptography.hazmat.primitives.asymmetric.ec.ECDSA) -> cryptography.hazmat.primitives.asymmetric.utils.Prehashed or cryptography.hazmat.primitives.hashes.HashAlgorithm
.ECDSA.algorithm: cryptography.hazmat.primitives.asymmetric.utils.Prehashed or cryptography.hazmat.primitives.hashes.HashAlgorithm
.ECDSA.deterministic_signing : (self: cryptography.hazmat.primitives.asymmetric.ec.ECDSA) -> Bool
.ECDSA.deterministic_signing: Bool

.generate_private_key: Never
.derive_private_key: (private_value: Int, curve: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve, backend: Obj := Obj) -> cryptography.hazmat.primitives.asymmetric.ec.EllipticCurvePrivateKey
.ECDH: ClassType
.ECDH.__call__: () -> cryptography.hazmat.primitives.asymmetric.ec.ECDH

._OID_TO_CURVE: Never
.get_curve_for_oid: (oid: Obj) -> Never

##[pylyzer] failed /home/vizn3r/dev/dano-picovina/pdf/venv/lib/python3.12/site-packages/cryptography/hazmat/primitives/ciphers/algorithms.py 1748113092 4542
.___v_desugar_1: Never
.annotations: Never
.utils = pyimport "utils"

.___v_desugar_2 = pyimport "algorithms"
.algorithms = pyimport "algorithms"
.ARC4: {cryptography.hazmat.decrepit.ciphers.algorithms.ARC4}
.___v_desugar_3 = pyimport "algorithms"

.CAST5: {cryptography.hazmat.decrepit.ciphers.algorithms.CAST5}
.___v_desugar_4 = pyimport "algorithms"

.IDEA: {cryptography.hazmat.decrepit.ciphers.algorithms.IDEA}
.___v_desugar_5 = pyimport "algorithms"

.SEED: {cryptography.hazmat.decrepit.ciphers.algorithms.SEED}
.___v_desugar_6 = pyimport "algorithms"

.Blowfish: {cryptography.hazmat.decrepit.ciphers.algorithms.Blowfish}
.___v_desugar_7 = pyimport "algorithms"

.TripleDES: {cryptography.hazmat.decrepit.ciphers.algorithms.TripleDES}
.___v_desugar_8 = pyimport "_cipheralgorithm"
._cipheralgorithm = pyimport "_cipheralgorithm"
._verify_key_size: (algorithm: cryptography.hazmat.primitives._cipheralgorithm.CipherAlgorithm, key: Obj) -> Never
.___v_desugar_9 = pyimport "__init__"
.__init__ = pyimport "__init__"
.BlockCipherAlgorithm: {cryptography.hazmat.primitives._cipheralgorithm.BlockCipherAlgorithm}
.CipherAlgorithm: {cryptography.hazmat.primitives._cipheralgorithm.CipherAlgorithm}
.AES: ClassType
cryptography = pyimport "cryptography"
.AES <: cryptography.hazmat.primitives._cipheralgorithm.BlockCipherAlgorithm
.AES.key: Never
.AES.__call__: (key: Obj) -> algorithms.AES
.AES.name: {"AES"}
.AES.block_size: {128}
.AES.key_sizes: global::FrozenSet({128, 192, 256, 512})
.AES.key_size : (self: algorithms.AES) -> Int
.AES.key_size: Int

.AES128: ClassType
.AES128 <: cryptography.hazmat.primitives._cipheralgorithm.BlockCipherAlgorithm
.AES128.key: Never
.AES128.__call__: (key: Obj) -> algorithms.AES128
.AES128.name: {"AES"}
.AES128.block_size: {128}
.AES128.key_sizes: global::FrozenSet({128})
.AES128.key_size: {128}

.AES256: ClassType
.AES256 <: cryptography.hazmat.primitives._cipheralgorithm.BlockCipherAlgorithm
.AES256.key: Never
.AES256.__call__: (key: Obj) -> algorithms.AES256
.AES256.name: {"AES"}
.AES256.block_size: {128}
.AES256.key_sizes: global::FrozenSet({256})
.AES256.key_size: {256}

.Camellia: ClassType
.Camellia <: cryptography.hazmat.primitives._cipheralgorithm.BlockCipherAlgorithm
.Camellia.key: Never
.Camellia.__call__: (key: Obj) -> algorithms.Camellia
.Camellia.name: {"camellia"}
.Camellia.block_size: {128}
.Camellia.key_sizes: global::FrozenSet({192, 256, 128})
.Camellia.key_size : (self: algorithms.Camellia) -> Int
.Camellia.key_size: Int







.ChaCha20: ClassType
.ChaCha20 <: cryptography.hazmat.primitives._cipheralgorithm.CipherAlgorithm
.ChaCha20.key: Never
.ChaCha20._nonce: Never
.ChaCha20.__call__: (key: Obj, nonce: Obj) -> algorithms.ChaCha20
.ChaCha20.name: {"ChaCha20"}
.ChaCha20.key_sizes: global::FrozenSet({256})
.ChaCha20.nonce : (self: algorithms.ChaCha20) -> Never
.ChaCha20.nonce: Never
.ChaCha20.key_size : (self: algorithms.ChaCha20) -> Int
.ChaCha20.key_size: Int

.SM4: ClassType
.SM4 <: cryptography.hazmat.primitives._cipheralgorithm.BlockCipherAlgorithm
.SM4.key: global::Bytes
.SM4.__call__: (key: global::Bytes) -> algorithms.SM4
.SM4.name: {"SM4"}
.SM4.block_size: {128}
.SM4.key_sizes: global::FrozenSet({128})
.SM4.key_size : (self: algorithms.SM4) -> Int
.SM4.key_size: Int


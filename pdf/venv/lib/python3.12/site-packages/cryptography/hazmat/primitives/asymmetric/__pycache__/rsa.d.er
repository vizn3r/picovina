##[pylyzer] failed /home/vizn3r/dev/dano-picovina/pdf/venv/lib/python3.12/site-packages/cryptography/hazmat/primitives/asymmetric/rsa.py 1748113092 7967
.___v_desugar_1: Never
.annotations: Never
.abc: Never

.random: Never

.typing: Never

.___v_desugar_2: Never
.gcd: Never
.___v_desugar_3: Never
.rust_openssl: Never
._serialization = pyimport "_serialization"
.hashes = pyimport "hashes"

.___v_desugar_4 = pyimport "_asymmetric"
._asymmetric = pyimport "_asymmetric"
.AsymmetricPadding: {cryptography.hazmat.primitives._asymmetric.AsymmetricPadding}
.asym_utils = pyimport "utils"
.utils = pyimport "utils"

.RSAPrivateKey: ClassType
.RSAPrivateKey.__call__: () -> cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey
.RSAPrivateKey.decrypt: (self: cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey, ciphertext: global::Bytes, padding: cryptography.hazmat.primitives._asymmetric.AsymmetricPadding) -> global::Bytes
.RSAPrivateKey.key_size : (self: cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey) -> Int
.RSAPrivateKey.key_size: Int
.RSAPrivateKey.public_key: (self: cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey) -> Never
.RSAPrivateKey.sign: (self: cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey, data: global::Bytes, padding: cryptography.hazmat.primitives._asymmetric.AsymmetricPadding, algorithm: cryptography.hazmat.primitives.asymmetric.utils.Prehashed or cryptography.hazmat.primitives.hashes.HashAlgorithm) -> global::Bytes
.RSAPrivateKey.private_numbers: (self: cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey) -> Never
.RSAPrivateKey.private_bytes: (self: cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey, encoding: cryptography.hazmat.primitives._serialization.Encoding, format: cryptography.hazmat.primitives._serialization.PrivateFormat, encryption_algorithm: cryptography.hazmat.primitives._serialization.KeySerializationEncryption) -> global::Bytes
.RSAPrivateKey.__copy__: (self: cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey) -> cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey

.RSAPrivateKeyWithSerialization: {cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey}

.RSAPublicKey: ClassType
.RSAPublicKey.__call__: () -> cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey
.RSAPublicKey.encrypt: (self: cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey, plaintext: global::Bytes, padding: cryptography.hazmat.primitives._asymmetric.AsymmetricPadding) -> global::Bytes
.RSAPublicKey.key_size : (self: cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey) -> Int
.RSAPublicKey.key_size: Int
.RSAPublicKey.public_numbers: (self: cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey) -> Never
.RSAPublicKey.public_bytes: (self: cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey, encoding: cryptography.hazmat.primitives._serialization.Encoding, format: cryptography.hazmat.primitives._serialization.PublicFormat) -> global::Bytes
.RSAPublicKey.verify: (self: cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey, signature: global::Bytes, data: global::Bytes, padding: cryptography.hazmat.primitives._asymmetric.AsymmetricPadding, algorithm: cryptography.hazmat.primitives.asymmetric.utils.Prehashed or cryptography.hazmat.primitives.hashes.HashAlgorithm) -> NoneType
.RSAPublicKey.recover_data_from_signature: (self: cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey, signature: global::Bytes, padding: cryptography.hazmat.primitives._asymmetric.AsymmetricPadding, algorithm: NoneType or cryptography.hazmat.primitives.hashes.HashAlgorithm) -> global::Bytes
.RSAPublicKey.__eq__: (self: cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey, other: Obj) -> Bool
.RSAPublicKey.__copy__: (self: cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey) -> cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey

.RSAPublicKeyWithSerialization: {cryptography.hazmat.primitives.asymmetric.rsa.RSAPublicKey}

.RSAPrivateNumbers: Never
.RSAPublicNumbers: Never
.generate_private_key: (public_exponent: Int, key_size: Int, backend: Obj := Obj) -> cryptography.hazmat.primitives.asymmetric.rsa.RSAPrivateKey
._verify_rsa_parameters: (public_exponent: Int, key_size: Int) -> NoneType
._modinv: (e: Int, m: Int) -> Int
.rsa_crt_iqmp: (p: Int, q: Int) -> Int
.rsa_crt_dmp1: (private_exponent: Int, p: Int) -> Int
.rsa_crt_dmq1: (private_exponent: Int, q: Int) -> Int
.rsa_recover_private_exponent: (e: Int, p: Int, q: Int) -> Int
._MAX_RECOVERY_ATTEMPTS: {500}
.rsa_recover_prime_factors: (n: Int, e: Int, d: Int) -> global::Tuple([Int, Int])

##[pylyzer] failed /home/vizn3r/dev/dano-picovina/pdf/venv/lib/python3.12/site-packages/cryptography/hazmat/backends/openssl/backend.py 1748113092 10329
.___v_desugar_1: Never
.annotations: Never
.___v_desugar_2: Never
.rust_openssl: Never
.binding = pyimport "binding"

.hashes = pyimport "hashes"

.___v_desugar_3 = pyimport "_asymmetric"
._asymmetric = pyimport "_asymmetric"
.AsymmetricPadding: {cryptography.hazmat.primitives._asymmetric.AsymmetricPadding}
.ec = pyimport "ec"

.asym_utils = pyimport "utils"
.utils = pyimport "utils"

.___v_desugar_4 = pyimport "padding"
.padding = pyimport "padding"
.MGF1: {cryptography.hazmat.primitives.asymmetric.padding.MGF1}
.OAEP: {cryptography.hazmat.primitives.asymmetric.padding.OAEP}
.PSS: {cryptography.hazmat.primitives.asymmetric.padding.PSS}
.PKCS1v15: {cryptography.hazmat.primitives.asymmetric.padding.PKCS1v15}
.___v_desugar_5 = pyimport "__init__"
.__init__ = pyimport "__init__"
.CipherAlgorithm: {cryptography.hazmat.primitives._cipheralgorithm.CipherAlgorithm}
.___v_desugar_6 = pyimport "algorithms"
.algorithms = pyimport "algorithms"
.AES: {algorithms.AES}
.___v_desugar_7 = pyimport "modes"
.modes = pyimport "modes"
.CBC: {modes.CBC}
.Mode: {modes.Mode}
.Backend: ClassType
.Backend._ffi: Never
.Backend._lib: Never
.Backend._fips_enabled: Never
.Backend._binding: Never
.Backend.__call__: () -> cryptography.hazmat.backends.openssl.backend.Backend
.Backend.name: {"openssl"}
.Backend._fips_ciphers: global::Tuple([{algorithms.AES}])
.Backend._fips_hashes: global::Tuple([{cryptography.hazmat.primitives.hashes.SHA224}, {cryptography.hazmat.primitives.hashes.SHA256}, {cryptography.hazmat.primitives.hashes.SHA384}, {cryptography.hazmat.primitives.hashes.SHA512}, {cryptography.hazmat.primitives.hashes.SHA512_224}, {cryptography.hazmat.primitives.hashes.SHA512_256}, {cryptography.hazmat.primitives.hashes.SHA3_224}, {cryptography.hazmat.primitives.hashes.SHA3_256}, {cryptography.hazmat.primitives.hashes.SHA3_384}, {cryptography.hazmat.primitives.hashes.SHA3_512}, {cryptography.hazmat.primitives.hashes.SHAKE128}, {cryptography.hazmat.primitives.hashes.SHAKE256}])
.Backend._fips_ecdh_curves: global::Tuple([{cryptography.hazmat.primitives.asymmetric.ec.SECP224R1}, {cryptography.hazmat.primitives.asymmetric.ec.SECP256R1}, {cryptography.hazmat.primitives.asymmetric.ec.SECP384R1}, {cryptography.hazmat.primitives.asymmetric.ec.SECP521R1}])
.Backend._fips_rsa_min_key_size: {2048}
.Backend._fips_rsa_min_public_exponent: {65537}
.Backend._fips_dsa_min_modulus: Int
.Backend._fips_dh_min_key_size: {2048}
.Backend._fips_dh_min_modulus: Int
.Backend.__repr__: (self: cryptography.hazmat.backends.openssl.backend.Backend) -> Str
.Backend.openssl_assert: (self: cryptography.hazmat.backends.openssl.backend.Backend, ok: Bool) -> NoneType
.Backend._enable_fips: (self: cryptography.hazmat.backends.openssl.backend.Backend) -> NoneType
.Backend.openssl_version_text: (self: cryptography.hazmat.backends.openssl.backend.Backend) -> Str
.Backend.openssl_version_number: (self: cryptography.hazmat.backends.openssl.backend.Backend) -> Int
.Backend.hash_supported: (self: cryptography.hazmat.backends.openssl.backend.Backend, algorithm: cryptography.hazmat.primitives.hashes.HashAlgorithm) -> Bool
.Backend.signature_hash_supported: (self: cryptography.hazmat.backends.openssl.backend.Backend, algorithm: cryptography.hazmat.primitives.hashes.HashAlgorithm) -> Bool
.Backend.scrypt_supported: (self: cryptography.hazmat.backends.openssl.backend.Backend) -> Bool
.Backend.argon2_supported: (self: cryptography.hazmat.backends.openssl.backend.Backend) -> Bool
.Backend.hmac_supported: (self: cryptography.hazmat.backends.openssl.backend.Backend, algorithm: cryptography.hazmat.primitives.hashes.HashAlgorithm) -> Bool
.Backend.cipher_supported: (self: cryptography.hazmat.backends.openssl.backend.Backend, cipher: cryptography.hazmat.primitives._cipheralgorithm.CipherAlgorithm, mode: modes.Mode) -> Bool
.Backend.pbkdf2_hmac_supported: (self: cryptography.hazmat.backends.openssl.backend.Backend, algorithm: cryptography.hazmat.primitives.hashes.HashAlgorithm) -> Bool
.Backend._consume_errors: Never
.Backend._oaep_hash_supported: (self: cryptography.hazmat.backends.openssl.backend.Backend, algorithm: cryptography.hazmat.primitives.hashes.HashAlgorithm) -> Bool
.Backend.rsa_padding_supported: (self: cryptography.hazmat.backends.openssl.backend.Backend, padding: cryptography.hazmat.primitives._asymmetric.AsymmetricPadding) -> Bool
.Backend.rsa_encryption_supported: (self: cryptography.hazmat.backends.openssl.backend.Backend, padding: cryptography.hazmat.primitives._asymmetric.AsymmetricPadding) -> Bool
.Backend.dsa_supported: (self: cryptography.hazmat.backends.openssl.backend.Backend) -> Bool
.Backend.dsa_hash_supported: (self: cryptography.hazmat.backends.openssl.backend.Backend, algorithm: cryptography.hazmat.primitives.hashes.HashAlgorithm) -> Bool
.Backend.cmac_algorithm_supported: (self: cryptography.hazmat.backends.openssl.backend.Backend, algorithm: cryptography.hazmat.primitives._cipheralgorithm.CipherAlgorithm) -> Bool
.Backend.elliptic_curve_supported: (self: cryptography.hazmat.backends.openssl.backend.Backend, curve: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve) -> Bool
.Backend.elliptic_curve_signature_algorithm_supported: (self: cryptography.hazmat.backends.openssl.backend.Backend, signature_algorithm: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurveSignatureAlgorithm, curve: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve) -> Bool
.Backend.elliptic_curve_exchange_algorithm_supported: (self: cryptography.hazmat.backends.openssl.backend.Backend, algorithm: cryptography.hazmat.primitives.asymmetric.ec.ECDH, curve: cryptography.hazmat.primitives.asymmetric.ec.EllipticCurve) -> Bool
.Backend.dh_supported: (self: cryptography.hazmat.backends.openssl.backend.Backend) -> Bool
.Backend.dh_x942_serialization_supported: (self: cryptography.hazmat.backends.openssl.backend.Backend) -> Bool
.Backend.x25519_supported: (self: cryptography.hazmat.backends.openssl.backend.Backend) -> Bool
.Backend.x448_supported: (self: cryptography.hazmat.backends.openssl.backend.Backend) -> Bool
.Backend.ed25519_supported: (self: cryptography.hazmat.backends.openssl.backend.Backend) -> Bool
.Backend.ed448_supported: (self: cryptography.hazmat.backends.openssl.backend.Backend) -> Bool
.Backend.ecdsa_deterministic_supported: (self: cryptography.hazmat.backends.openssl.backend.Backend) -> Bool
.Backend.poly1305_supported: (self: cryptography.hazmat.backends.openssl.backend.Backend) -> Bool
.Backend.pkcs7_supported: (self: cryptography.hazmat.backends.openssl.backend.Backend) -> Bool

cryptography = pyimport "cryptography"
.backend: cryptography.hazmat.backends.openssl.backend.Backend

##[pylyzer] failed /home/vizn3r/dev/dano-picovina/pdf/venv/lib/python3.12/site-packages/pdfminer/pdfinterp.py 1748113092 42893
.logging: Never

.re: Never

.___v_desugar_1: Never
.BytesIO: Never
.___v_desugar_2: Never
.Dict: Never
.List: Never
.Mapping: Never
.Optional: Never
.Sequence: Never
.Tuple: Never
.Union: Never
.cast: Never
.settings = pyimport "settings"

.___v_desugar_3 = pyimport "casting"
.casting = pyimport "casting"
.safe_cmyk: (c: Obj, m: Obj, y: Obj, k: Obj) -> global::Tuple([Float, Float, Float, Float]) or NoneType
.safe_float: (o: Obj) -> Float or NoneType
.safe_int: (o: Obj) -> NoneType or Int
.safe_matrix: (a: Obj, b: Obj, c: Obj, d: Obj, e: Obj, f: Obj) -> Never
.safe_rgb: (r: Obj, g: Obj, b: Obj) -> NoneType or global::Tuple([Float, Float, Float])
.___v_desugar_4 = pyimport "cmapdb"
.cmapdb = pyimport "cmapdb"
.CMap: {cmapdb.CMap}
.CMapBase: {cmapdb.CMapBase}
.CMapDB: {cmapdb.CMapDB}
.___v_desugar_5 = pyimport "pdfcolor"
.pdfcolor = pyimport "pdfcolor"
.PREDEFINED_COLORSPACE: Never
.PDFColorSpace: {pdfcolor.PDFColorSpace}
.___v_desugar_6 = pyimport "pdfdevice"
.pdfdevice = pyimport "pdfdevice"
.PDFDevice: Never
.PDFTextSeq: Never
.___v_desugar_7 = pyimport "pdfexceptions"
.pdfexceptions = pyimport "pdfexceptions"
.PDFException: {pdfminer.pdfexceptions.PDFException}
.PDFValueError: {pdfminer.pdfexceptions.PDFValueError}
.___v_desugar_8 = pyimport "pdffont"
.pdffont = pyimport "pdffont"
.PDFCIDFont: {pdffont.PDFCIDFont}
.PDFFont: {pdffont.PDFFont}
.PDFFontError: {pdffont.PDFFontError}
.PDFTrueTypeFont: {pdffont.PDFTrueTypeFont}
.PDFType1Font: {pdffont.PDFType1Font}
.PDFType3Font: {pdffont.PDFType3Font}
.___v_desugar_9 = pyimport "pdfpage"
.pdfpage = pyimport "pdfpage"
.PDFPage: Never
.___v_desugar_10 = pyimport "pdftypes"
.pdftypes = pyimport "pdftypes"
.LITERALS_ASCII85_DECODE: Never
.PDFObjRef: {pdftypes.PDFObjRef}
.PDFStream: {pdftypes.PDFStream}
.dict_value: Never
.list_value: Never
.resolve1: (x: Obj, default: Obj := Obj) -> Never
.stream_value: (x: Obj) -> Never
.___v_desugar_11 = pyimport "psexceptions"
.psexceptions = pyimport "psexceptions"
.PSEOF: {pdfminer.psexceptions.PSEOF}
.PSTypeError: {pdfminer.psexceptions.PSTypeError}
.___v_desugar_12 = pyimport "psparser"
.psparser = pyimport "psparser"
.KWD: Never
.LIT: Never
.PSKeyword: {psparser.PSKeyword}
.PSLiteral: {psparser.PSLiteral}
.PSStackParser: {psparser.PSStackParser}
.PSStackType: Never
.keyword_name: (x: Obj) -> Never
.literal_name: (x: Obj) -> Str
.___v_desugar_13 = pyimport "utils"
.utils = pyimport "utils"
.MATRIX_IDENTITY: {Type_v_global_41600: global::Tuple([Nat, Nat, Nat, Nat, Nat, Nat]) | Type_v_global_41600 == (1, 0, 0, 1, 0, 0)}
.Matrix: Never
.PathSegment: Never
.Point: Never
.Rect: Never
.choplist: Never
.mult_matrix: (m1: Obj, m0: Obj) -> Never
.log: Never
.PDFResourceError: ClassType
pdfminer = pyimport "pdfminer"
.PDFResourceError <: pdfminer.pdfexceptions.PDFException

.PDFInterpreterError: ClassType
.PDFInterpreterError <: pdfminer.pdfexceptions.PDFException

.LITERAL_PDF: Never
.LITERAL_TEXT: Never
.LITERAL_FONT: Never
.LITERAL_FORM: Never
.LITERAL_IMAGE: Never
.PDFTextState: ClassType
.PDFTextState.scaling: Float
.PDFTextState.linematrix: Never
.PDFTextState.fontsize: Float
.PDFTextState.charspace: Float
.PDFTextState.wordspace: Float
.PDFTextState.leading: Float
.PDFTextState.render: Int
.PDFTextState.rise: Float
.PDFTextState.matrix: Never
.PDFTextState.font: Never
.PDFTextState.__call__: () -> pdfinterp.PDFTextState
.PDFTextState.__repr__: (self: pdfinterp.PDFTextState) -> Str
.PDFTextState.copy: (self: pdfinterp.PDFTextState) -> pdfinterp.PDFTextState
.PDFTextState.reset: (self: pdfinterp.PDFTextState) -> NoneType

.Color: Never
.PDFGraphicState: ClassType
.PDFGraphicState.linecap: Never
.PDFGraphicState.miterlimit: Never
.PDFGraphicState.ncs: pdfcolor.PDFColorSpace
.PDFGraphicState.linejoin: Never
.PDFGraphicState.intent: Never
.PDFGraphicState.scs: pdfcolor.PDFColorSpace
.PDFGraphicState.ncolor: Never
.PDFGraphicState.flatness: Never
.PDFGraphicState.linewidth: Float
.PDFGraphicState.dash: Never
.PDFGraphicState.scolor: Never
.PDFGraphicState.__call__: () -> pdfinterp.PDFGraphicState
.PDFGraphicState.copy: (self: pdfinterp.PDFGraphicState) -> pdfinterp.PDFGraphicState
.PDFGraphicState.__repr__: (self: pdfinterp.PDFGraphicState) -> Str

.PDFResourceManager: ClassType
.PDFResourceManager.caching: Bool
.PDFResourceManager._cached_fonts: Never
.PDFResourceManager.__call__: (caching: Bool := Bool) -> pdfinterp.PDFResourceManager
.PDFResourceManager.get_procset: (self: pdfinterp.PDFResourceManager, procs: global::Sequence(Obj)) -> NoneType
.PDFResourceManager.get_cmap: (self: pdfinterp.PDFResourceManager, cmapname: Str, strict: Bool := Bool) -> cmapdb.CMapBase
.PDFResourceManager.get_font: (self: pdfinterp.PDFResourceManager, objid: Obj, spec: global::Mapping(Str, Obj)) -> pdffont.PDFFont

.PDFContentParser: ClassType
.PDFContentParser <: Never
.PDFContentParser.istream: Never
.PDFContentParser.streams: Never
.PDFContentParser.__call__: (streams: global::Sequence(Obj)) -> pdfinterp.PDFContentParser
.PDFContentParser.fillfp: (self: pdfinterp.PDFContentParser) -> NoneType
.PDFContentParser.seek: (self: pdfinterp.PDFContentParser, pos: Int) -> NoneType
.PDFContentParser.fillbuf: (self: pdfinterp.PDFContentParser) -> NoneType
.PDFContentParser.get_inline_data: (self: pdfinterp.PDFContentParser, pos: Int, target: global::Bytes := global::Bytes) -> global::Tuple([Int, global::Bytes])
.PDFContentParser.flush: (self: pdfinterp.PDFContentParser) -> NoneType
.PDFContentParser.KEYWORD_BI: Never
.PDFContentParser.KEYWORD_ID: Never
.PDFContentParser.KEYWORD_EI: Never
.PDFContentParser.do_keyword: (self: pdfinterp.PDFContentParser, pos: Int, token: psparser.PSKeyword) -> NoneType

.PDFStackT: Never

.PDFPageInterpreter: ClassType
pdfinterp = pyimport "pdfinterp"
.PDFPageInterpreter.rsrcmgr: .PDFResourceManager
.PDFPageInterpreter.device: Never
.PDFPageInterpreter.__call__: (rsrcmgr: pdfinterp.PDFResourceManager, device: Obj) -> pdfinterp.PDFPageInterpreter
.PDFPageInterpreter.dup: (self: pdfinterp.PDFPageInterpreter) -> pdfinterp.PDFPageInterpreter
.PDFPageInterpreter.init_resources: (self: pdfinterp.PDFPageInterpreter, resources: global::Dict!({Obj: Obj})) -> NoneType
.PDFPageInterpreter.init_state: (self: pdfinterp.PDFPageInterpreter, ctm: Obj) -> NoneType
.PDFPageInterpreter.push: (self: pdfinterp.PDFPageInterpreter, obj: Obj) -> NoneType
.PDFPageInterpreter.pop: Never
.PDFPageInterpreter.get_current_state: (self: pdfinterp.PDFPageInterpreter) -> global::Tuple([Never, pdfinterp.PDFTextState, pdfinterp.PDFGraphicState])
.PDFPageInterpreter.set_current_state: (self: pdfinterp.PDFPageInterpreter, state: global::Tuple([Obj, pdfinterp.PDFTextState, pdfinterp.PDFGraphicState])) -> NoneType
.PDFPageInterpreter.do_q: (self: pdfinterp.PDFPageInterpreter) -> NoneType
.PDFPageInterpreter.do_Q: (self: pdfinterp.PDFPageInterpreter) -> NoneType
.PDFPageInterpreter.do_cm: (self: pdfinterp.PDFPageInterpreter, a1: Obj, b1: Obj, c1: Obj, d1: Obj, e1: Obj, f1: Obj) -> NoneType
.PDFPageInterpreter.do_w: (self: pdfinterp.PDFPageInterpreter, linewidth: Obj) -> NoneType
.PDFPageInterpreter.do_J: (self: pdfinterp.PDFPageInterpreter, linecap: Obj) -> NoneType
.PDFPageInterpreter.do_j: (self: pdfinterp.PDFPageInterpreter, linejoin: Obj) -> NoneType
.PDFPageInterpreter.do_M: (self: pdfinterp.PDFPageInterpreter, miterlimit: Obj) -> NoneType
.PDFPageInterpreter.do_d: (self: pdfinterp.PDFPageInterpreter, dash: Obj, phase: Obj) -> NoneType
.PDFPageInterpreter.do_ri: (self: pdfinterp.PDFPageInterpreter, intent: Obj) -> NoneType
.PDFPageInterpreter.do_i: (self: pdfinterp.PDFPageInterpreter, flatness: Obj) -> NoneType
.PDFPageInterpreter.do_gs: (self: pdfinterp.PDFPageInterpreter, name: Obj) -> NoneType
.PDFPageInterpreter.do_m: (self: pdfinterp.PDFPageInterpreter, x: Obj, y: Obj) -> NoneType
.PDFPageInterpreter.do_l: (self: pdfinterp.PDFPageInterpreter, x: Obj, y: Obj) -> NoneType
.PDFPageInterpreter.do_c: (self: pdfinterp.PDFPageInterpreter, x1: Obj, y1: Obj, x2: Obj, y2: Obj, x3: Obj, y3: Obj) -> NoneType
.PDFPageInterpreter.do_v: (self: pdfinterp.PDFPageInterpreter, x2: Obj, y2: Obj, x3: Obj, y3: Obj) -> NoneType
.PDFPageInterpreter.do_y: (self: pdfinterp.PDFPageInterpreter, x1: Obj, y1: Obj, x3: Obj, y3: Obj) -> NoneType
.PDFPageInterpreter.do_h: (self: pdfinterp.PDFPageInterpreter) -> NoneType
.PDFPageInterpreter.do_re: (self: pdfinterp.PDFPageInterpreter, x: Obj, y: Obj, w: Obj, h: Obj) -> NoneType
.PDFPageInterpreter.do_S: (self: pdfinterp.PDFPageInterpreter) -> NoneType
.PDFPageInterpreter.do_s: (self: pdfinterp.PDFPageInterpreter) -> NoneType
.PDFPageInterpreter.do_f: (self: pdfinterp.PDFPageInterpreter) -> NoneType
.PDFPageInterpreter.do_F: (self: pdfinterp.PDFPageInterpreter) -> NoneType
.PDFPageInterpreter.do_f_a: (self: pdfinterp.PDFPageInterpreter) -> NoneType
.PDFPageInterpreter.do_B: (self: pdfinterp.PDFPageInterpreter) -> NoneType
.PDFPageInterpreter.do_B_a: (self: pdfinterp.PDFPageInterpreter) -> NoneType
.PDFPageInterpreter.do_b: (self: pdfinterp.PDFPageInterpreter) -> NoneType
.PDFPageInterpreter.do_b_a: (self: pdfinterp.PDFPageInterpreter) -> NoneType
.PDFPageInterpreter.do_n: (self: pdfinterp.PDFPageInterpreter) -> NoneType
.PDFPageInterpreter.do_W: (self: pdfinterp.PDFPageInterpreter) -> NoneType
.PDFPageInterpreter.do_W_a: (self: pdfinterp.PDFPageInterpreter) -> NoneType
.PDFPageInterpreter.do_CS: (self: pdfinterp.PDFPageInterpreter, name: Obj) -> NoneType
.PDFPageInterpreter.do_cs: (self: pdfinterp.PDFPageInterpreter, name: Obj) -> NoneType
.PDFPageInterpreter.do_G: (self: pdfinterp.PDFPageInterpreter, gray: Obj) -> NoneType
.PDFPageInterpreter.do_g: (self: pdfinterp.PDFPageInterpreter, gray: Obj) -> NoneType
.PDFPageInterpreter.do_RG: (self: pdfinterp.PDFPageInterpreter, r: Obj, g: Obj, b: Obj) -> NoneType
.PDFPageInterpreter.do_rg: (self: pdfinterp.PDFPageInterpreter, r: Obj, g: Obj, b: Obj) -> NoneType
.PDFPageInterpreter.do_K: (self: pdfinterp.PDFPageInterpreter, c: Obj, m: Obj, y: Obj, k: Obj) -> NoneType
.PDFPageInterpreter.do_k: (self: pdfinterp.PDFPageInterpreter, c: Obj, m: Obj, y: Obj, k: Obj) -> NoneType
.PDFPageInterpreter.do_SCN: (self: pdfinterp.PDFPageInterpreter) -> NoneType
.PDFPageInterpreter.do_scn: (self: pdfinterp.PDFPageInterpreter) -> NoneType
.PDFPageInterpreter.do_SC: (self: pdfinterp.PDFPageInterpreter) -> NoneType
.PDFPageInterpreter.do_sc: (self: pdfinterp.PDFPageInterpreter) -> NoneType
.PDFPageInterpreter.do_sh: (self: pdfinterp.PDFPageInterpreter, name: Obj) -> NoneType
.PDFPageInterpreter.do_BT: (self: pdfinterp.PDFPageInterpreter) -> NoneType
.PDFPageInterpreter.do_ET: (self: pdfinterp.PDFPageInterpreter) -> NoneType
.PDFPageInterpreter.do_BX: (self: pdfinterp.PDFPageInterpreter) -> NoneType
.PDFPageInterpreter.do_EX: (self: pdfinterp.PDFPageInterpreter) -> NoneType
.PDFPageInterpreter.do_MP: (self: pdfinterp.PDFPageInterpreter, tag: Obj) -> NoneType
.PDFPageInterpreter.do_DP: (self: pdfinterp.PDFPageInterpreter, tag: Obj, props: Obj) -> NoneType
.PDFPageInterpreter.do_BMC: (self: pdfinterp.PDFPageInterpreter, tag: Obj) -> NoneType
.PDFPageInterpreter.do_BDC: (self: pdfinterp.PDFPageInterpreter, tag: Obj, props: Obj) -> NoneType
.PDFPageInterpreter.do_EMC: (self: pdfinterp.PDFPageInterpreter) -> NoneType
.PDFPageInterpreter.do_Tc: (self: pdfinterp.PDFPageInterpreter, space: Obj) -> NoneType
.PDFPageInterpreter.do_Tw: (self: pdfinterp.PDFPageInterpreter, space: Obj) -> NoneType
.PDFPageInterpreter.do_Tz: (self: pdfinterp.PDFPageInterpreter, scale: Obj) -> NoneType
.PDFPageInterpreter.do_TL: (self: pdfinterp.PDFPageInterpreter, leading: Obj) -> NoneType
.PDFPageInterpreter.do_Tf: (self: pdfinterp.PDFPageInterpreter, fontid: Obj, fontsize: Obj) -> NoneType
.PDFPageInterpreter.do_Tr: (self: pdfinterp.PDFPageInterpreter, render: Obj) -> NoneType
.PDFPageInterpreter.do_Ts: (self: pdfinterp.PDFPageInterpreter, rise: Obj) -> NoneType
.PDFPageInterpreter.do_Td: (self: pdfinterp.PDFPageInterpreter, tx: Obj, ty: Obj) -> NoneType
.PDFPageInterpreter.do_TD: (self: pdfinterp.PDFPageInterpreter, tx: Obj, ty: Obj) -> NoneType
.PDFPageInterpreter.do_Tm: (self: pdfinterp.PDFPageInterpreter, a: Obj, b: Obj, c: Obj, d: Obj, e: Obj, f: Obj) -> NoneType
.PDFPageInterpreter.do_T_a: (self: pdfinterp.PDFPageInterpreter) -> NoneType
.PDFPageInterpreter.do_TJ: (self: pdfinterp.PDFPageInterpreter, seq: Obj) -> NoneType
.PDFPageInterpreter.do_Tj: (self: pdfinterp.PDFPageInterpreter, s: Obj) -> NoneType
.PDFPageInterpreter.do__q: (self: pdfinterp.PDFPageInterpreter, s: Obj) -> NoneType
.PDFPageInterpreter.do__w: (self: pdfinterp.PDFPageInterpreter, aw: Obj, ac: Obj, s: Obj) -> NoneType
.PDFPageInterpreter.do_BI: (self: pdfinterp.PDFPageInterpreter) -> NoneType
.PDFPageInterpreter.do_ID: (self: pdfinterp.PDFPageInterpreter) -> NoneType
.PDFPageInterpreter.do_EI: (self: pdfinterp.PDFPageInterpreter, obj: Obj) -> NoneType
.PDFPageInterpreter.do_Do: (self: pdfinterp.PDFPageInterpreter, xobjid_arg: Obj) -> NoneType
.PDFPageInterpreter.process_page: (self: pdfinterp.PDFPageInterpreter, page: Obj) -> NoneType
.PDFPageInterpreter.render_contents: (self: pdfinterp.PDFPageInterpreter, resources: global::Dict!({Obj: Obj}), streams: global::Sequence(Obj), ctm: Obj := Obj) -> NoneType
.PDFPageInterpreter.execute: (self: pdfinterp.PDFPageInterpreter, streams: global::Sequence(Obj)) -> NoneType


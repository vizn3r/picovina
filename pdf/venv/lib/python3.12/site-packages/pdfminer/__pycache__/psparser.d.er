##[pylyzer] failed /home/vizn3r/dev/dano-picovina/pdf/venv/lib/python3.12/site-packages/pdfminer/psparser.py 1748113092 20347
.io: Never

.logging: Never

.re: Never

.___v_desugar_1: Never
.Any: Never
.BinaryIO: Never
.Dict: Never
.Generic: Never
.Iterator: Never
.List: Never
.Optional: Never
.Tuple: Never
.Type: Never
.TypeVar: Never
.Union: Never
.psexceptions = pyimport "psexceptions"
.settings = pyimport "settings"

.___v_desugar_2 = pyimport "utils"
.utils = pyimport "utils"
.choplist: Never
.log: Never
.PSException: {pdfminer.psexceptions.PSException}
.PSEOF: {pdfminer.psexceptions.PSEOF}
.PSSyntaxError: {pdfminer.psexceptions.PSSyntaxError}
.PSTypeError: {pdfminer.psexceptions.PSTypeError}
.PSValueError: {pdfminer.psexceptions.PSValueError}
.PSObject: ClassType
.PSObject.__call__: () -> psparser.PSObject

.PSLiteral: ClassType
psparser = pyimport "psparser"
.PSLiteral <: .PSObject
.PSLiteral.name: Never
.PSLiteral.__call__: (name: Obj) -> psparser.PSLiteral
.PSLiteral.NameType: Never
.PSLiteral.__repr__: (self: psparser.PSLiteral) -> Str

.PSKeyword: ClassType
.PSKeyword <: .PSObject
.PSKeyword.name: global::Bytes
.PSKeyword.__call__: (name: global::Bytes) -> psparser.PSKeyword
.PSKeyword.__repr__: (self: psparser.PSKeyword) -> Str

._SymbolT: Never
.PSSymbolTable: ClassType
.PSSymbolTable <: Never
.PSSymbolTable.klass: Never
.PSSymbolTable.dict: Never
.PSSymbolTable.__call__: (klass: Obj) -> psparser.PSSymbolTable
.PSSymbolTable.intern: (self: psparser.PSSymbolTable, name: Obj) -> psparser.PSLiteral or psparser.PSKeyword

.PSLiteralTable: Never
.PSKeywordTable: Never
.LIT: Never
.KWD: Never
.KEYWORD_PROC_BEGIN: Never
.KEYWORD_PROC_END: Never
.KEYWORD_ARRAY_BEGIN: Never
.KEYWORD_ARRAY_END: Never
.KEYWORD_DICT_BEGIN: Never
.KEYWORD_DICT_END: Never
.literal_name: (x: Obj) -> Str
.keyword_name: (x: Obj) -> Never
.EOL: Never
.SPC: Never
.NONSPC: Never
.HEX: Never
.END_LITERAL: Never
.END_HEX_STRING: Never
.HEX_PAIR: Never
.END_NUMBER: Never
.END_KEYWORD: Never
.END_STRING: Never
.OCT_STRING: Never
.ESC_STRING: Never
.PSBaseParserToken: Never
.PSBaseParser: ClassType
.PSBaseParser.buf: Never
.PSBaseParser.fp: Never
.PSBaseParser.charpos: Never
.PSBaseParser.eof: Never
.PSBaseParser._curtoken: Never
.PSBaseParser._parse1: Never
.PSBaseParser._curtokenpos: Never
.PSBaseParser._tokens: Never
.PSBaseParser.bufpos: Never
.PSBaseParser.__call__: (fp: Obj) -> psparser.PSBaseParser
.PSBaseParser.BUFSIZ: {4096}
.PSBaseParser.__repr__: (self: psparser.PSBaseParser) -> Str
.PSBaseParser.flush: (self: psparser.PSBaseParser) -> NoneType
.PSBaseParser.close: (self: psparser.PSBaseParser) -> NoneType
.PSBaseParser.tell: (self: psparser.PSBaseParser) -> Int
.PSBaseParser.poll: (self: psparser.PSBaseParser, pos: NoneType or Int := NoneType or Int, n: Int := Int) -> NoneType
.PSBaseParser.seek: (self: psparser.PSBaseParser, pos: Int) -> NoneType
.PSBaseParser.fillbuf: (self: psparser.PSBaseParser) -> NoneType
.PSBaseParser.nextline: (self: psparser.PSBaseParser) -> global::Tuple([Int, global::Bytes])
.PSBaseParser.revreadlines: (self: psparser.PSBaseParser) -> global::Iterator(global::Bytes)
.PSBaseParser._parse_main: (self: psparser.PSBaseParser, s: global::Bytes, i: Int) -> Int
.PSBaseParser._add_token: (self: psparser.PSBaseParser, obj: Obj) -> NoneType
.PSBaseParser._parse_comment: (self: psparser.PSBaseParser, s: global::Bytes, i: Int) -> Int
.PSBaseParser._parse_literal: (self: psparser.PSBaseParser, s: global::Bytes, i: Int) -> Int
.PSBaseParser._parse_literal_hex: (self: psparser.PSBaseParser, s: global::Bytes, i: Int) -> Int
.PSBaseParser._parse_number: (self: psparser.PSBaseParser, s: global::Bytes, i: Int) -> Int
.PSBaseParser._parse_float: (self: psparser.PSBaseParser, s: global::Bytes, i: Int) -> Int
.PSBaseParser._parse_keyword: (self: psparser.PSBaseParser, s: global::Bytes, i: Int) -> Int
.PSBaseParser._parse_string: (self: psparser.PSBaseParser, s: global::Bytes, i: Int) -> Int
.PSBaseParser._parse_string_1: (self: psparser.PSBaseParser, s: global::Bytes, i: Int) -> Int
.PSBaseParser._parse_wopen: (self: psparser.PSBaseParser, s: global::Bytes, i: Int) -> Int
.PSBaseParser._parse_wclose: (self: psparser.PSBaseParser, s: global::Bytes, i: Int) -> Int
.PSBaseParser._parse_hexstring: (self: psparser.PSBaseParser, s: global::Bytes, i: Int) -> Int
.PSBaseParser.nexttoken: (self: psparser.PSBaseParser) -> global::Tuple([Int, Never])

.ExtraT: Never
.PSStackType: Never
.PSStackEntry: Never
.PSStackParser: ClassType
.PSStackParser <: .PSBaseParser
.PSStackParser.curtype: Never
.PSStackParser.curstack: Never
.PSStackParser.results: Never
.PSStackParser.context: Never
.PSStackParser.__call__: (fp: Obj) -> psparser.PSStackParser
.PSStackParser.reset: (self: psparser.PSStackParser) -> NoneType
.PSStackParser.seek: (self: psparser.PSStackParser, pos: Int) -> NoneType
.PSStackParser.push: (self: psparser.PSStackParser, *objs: Obj) -> NoneType
.PSStackParser.pop: (self: psparser.PSStackParser, n: Int) -> global::List!(_: Type, _: Nat)
.PSStackParser.popall: (self: psparser.PSStackParser) -> global::List!(_: Type, _: Nat)
.PSStackParser.add_results: (self: psparser.PSStackParser, *objs: Obj) -> NoneType
.PSStackParser.start_type: (self: psparser.PSStackParser, pos: Int, Type: Str) -> NoneType
.PSStackParser.end_type: (self: psparser.PSStackParser, Type: Str) -> global::Tuple([Int, global::List!(_: Type, _: Nat)])
.PSStackParser.do_keyword: (self: psparser.PSStackParser, pos: Int, token: psparser.PSKeyword) -> NoneType
.PSStackParser.nextobject: (self: psparser.PSStackParser) -> Never


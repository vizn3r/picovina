##[pylyzer] failed /home/vizn3r/dev/dano-picovina/pdf/venv/lib/python3.12/site-packages/pdfminer/layout.py 1748113092 33507
.heapq: Never

.logging: Never

.___v_desugar_1: Never
.Dict: Never
.Generic: Never
.Iterable: Never
.Iterator: Never
.List: Never
.Optional: Never
.Sequence: Never
.Set: Never
.Tuple: Never
.TypeVar: Never
.Union: Never
.cast: Never
.___v_desugar_2 = pyimport "pdfcolor"
.pdfcolor = pyimport "pdfcolor"
.PDFColorSpace: Never
.___v_desugar_3 = pyimport "pdfexceptions"
.pdfexceptions = pyimport "pdfexceptions"
.PDFTypeError: {pdfminer.pdfexceptions.PDFTypeError}
.PDFValueError: {pdfminer.pdfexceptions.PDFValueError}
.___v_desugar_4 = pyimport "pdffont"
.pdffont = pyimport "pdffont"
.PDFFont: Never
.___v_desugar_5 = pyimport "pdfinterp"
.pdfinterp = pyimport "pdfinterp"
.Color: Never
.PDFGraphicState: Never
.___v_desugar_6 = pyimport "pdftypes"
.pdftypes = pyimport "pdftypes"
.PDFStream: Never
.___v_desugar_7 = pyimport "utils"
.utils = pyimport "utils"
.INF: Never
.LTComponentT: Never
.Matrix: Never
.PathSegment: Never
.Plane: {pdfminer.utils.Plane}
.Point: Never
.Rect: Never
.apply_matrix_rect: (m: Obj, rect: Obj) -> Never
.bbox2str: (bbox: Obj) -> Str
.fsplit: (pred: (Never) -> Bool, objs: global::Iterable(Never)) -> global::Tuple([global::List!(Never, _: Nat), global::List!(Never, _: Nat)])
.get_bound: Never
.matrix2str: (m: Obj) -> Str
.uniq: Never
.logger: Never
.IndexAssigner: ClassType
.IndexAssigner.index: Int
.IndexAssigner.__call__: (index: Int := Int) -> layout.IndexAssigner
.IndexAssigner.run: (self: layout.IndexAssigner, obj: Obj) -> NoneType

.LAParams: ClassType
.LAParams.line_overlap: Float
.LAParams.word_margin: Float
.LAParams.line_margin: Float
.LAParams.detect_vertical: Bool
.LAParams.char_margin: Float
.LAParams.all_texts: Bool
.LAParams.boxes_flow: Never
.LAParams.__call__: (line_overlap: Float := Float, char_margin: Float := Float, line_margin: Float := Float, word_margin: Float := Float, boxes_flow: Float or NoneType := Float or NoneType, detect_vertical: Bool := Bool, all_texts: Bool := Bool) -> layout.LAParams
.LAParams._validate: (self: layout.LAParams) -> NoneType
.LAParams.__repr__: (self: layout.LAParams) -> Str

.LTItem: ClassType
.LTItem.__call__: () -> layout.LTItem
.LTItem.analyze: (self: layout.LTItem, laparams: layout.LAParams) -> NoneType

.LTText: ClassType
.LTText.__call__: () -> layout.LTText
.LTText.__repr__: (self: layout.LTText) -> Str
.LTText.get_text: (self: layout.LTText) -> Str

.LTComponent: ClassType
layout = pyimport "layout"
.LTComponent <: .LTItem
.LTComponent.y1: Never
.LTComponent.x0: Never
.LTComponent.y0: Never
.LTComponent.x1: Never
.LTComponent.height: Never
.LTComponent.bbox: Never
.LTComponent.width: Never
.LTComponent.__call__: (bbox: Obj) -> layout.LTComponent
.LTComponent.__repr__: (self: layout.LTComponent) -> Str
.LTComponent.__lt__: (self: layout.LTComponent, Obj) -> Bool
.LTComponent.__le__: (self: layout.LTComponent, Obj) -> Bool
.LTComponent.__gt__: (self: layout.LTComponent, Obj) -> Bool
.LTComponent.__ge__: (self: layout.LTComponent, Obj) -> Bool
.LTComponent.set_bbox: (self: layout.LTComponent, bbox: Obj) -> NoneType
.LTComponent.is_empty: (self: layout.LTComponent) -> Bool
.LTComponent.is_hoverlap: (self: layout.LTComponent, obj: layout.LTComponent) -> Bool
.LTComponent.hdistance: (self: layout.LTComponent, obj: layout.LTComponent) -> Float
.LTComponent.hoverlap: (self: layout.LTComponent, obj: layout.LTComponent) -> Float
.LTComponent.is_voverlap: (self: layout.LTComponent, obj: layout.LTComponent) -> Bool
.LTComponent.vdistance: (self: layout.LTComponent, obj: layout.LTComponent) -> Float
.LTComponent.voverlap: (self: layout.LTComponent, obj: layout.LTComponent) -> Float

.LTCurve: ClassType
.LTCurve <: .LTComponent
.LTCurve.stroke: Bool
.LTCurve.stroking_color: Never
.LTCurve.evenodd: Bool
.LTCurve.fill: Bool
.LTCurve.original_path: Never
.LTCurve.pts: Never
.LTCurve.linewidth: Float
.LTCurve.non_stroking_color: Never
.LTCurve.dashing_style: Never
.LTCurve.__call__: Never
.LTCurve.get_pts: (self: layout.LTCurve) -> Str

.LTLine: ClassType
.LTLine <: .LTCurve
.LTLine.__call__: Never

.LTRect: ClassType
.LTRect <: .LTCurve
.LTRect.__call__: Never

.LTImage: ClassType
.LTImage <: .LTComponent
.LTImage.bits: Never
.LTImage.stream: Never
.LTImage.name: Str
.LTImage.srcsize: Never
.LTImage.imagemask: Never
.LTImage.colorspace: Never
.LTImage.__call__: (name: Str, stream: Obj, bbox: Obj) -> layout.LTImage
.LTImage.__repr__: (self: layout.LTImage) -> Str

.LTAnno: ClassType
.LTAnno <: .LTItem
.LTAnno._text: Never
.LTAnno.__call__: (text: Str) -> layout.LTAnno
.LTAnno.get_text: (self: layout.LTAnno) -> Str

.LTChar: ClassType
.LTChar <: .LTComponent
.LTChar._text: Never
.LTChar.graphicstate: Never
.LTChar.adv: Never
.LTChar.matrix: Never
.LTChar.ncs: Never
.LTChar.upright: Never
.LTChar.fontname: Never
.LTChar.__call__: (matrix: Obj, font: Obj, fontsize: Float, scaling: Float, rise: Float, text: Str, textwidth: Float, textdisp: Float or global::Tuple([Float or NoneType, Float]), ncs: Obj, graphicstate: Obj) -> layout.LTChar
.LTChar.__repr__: (self: layout.LTChar) -> Str
.LTChar.get_text: (self: layout.LTChar) -> Str

.LTItemT: Never
.LTContainer: ClassType
.LTContainer <: .LTComponent
.LTContainer._objs: Never
.LTContainer.__call__: (bbox: Obj) -> layout.LTContainer
.LTContainer.__iter__: Never
.LTContainer.__len__: (self: layout.LTContainer) -> Int
.LTContainer.add: (self: layout.LTContainer, obj: layout.LTItem) -> NoneType
.LTContainer.extend: Never
.LTContainer.analyze: (self: layout.LTContainer, laparams: layout.LAParams) -> NoneType

.LTExpandableContainer: ClassType
.LTExpandableContainer <: Never
.LTExpandableContainer.__call__: () -> layout.LTExpandableContainer
.LTExpandableContainer.add: (self: layout.LTExpandableContainer, obj: layout.LTComponent) -> NoneType

.LTTextContainer: ClassType
.LTTextContainer <: Never
.LTTextContainer.__call__: () -> layout.LTTextContainer
.LTTextContainer.get_text: (self: layout.LTTextContainer) -> Str

.TextLineElement: Never
.LTTextLine: ClassType
.LTTextLine <: Never
.LTTextLine.word_margin: Float
.LTTextLine.__call__: (word_margin: Float) -> layout.LTTextLine
.LTTextLine.__repr__: (self: layout.LTTextLine) -> Str
.LTTextLine.analyze: (self: layout.LTTextLine, laparams: layout.LAParams) -> NoneType
.LTTextLine.find_neighbors: (self: layout.LTTextLine, plane: Obj, ratio: Float) -> global::List!(_: Type, _: Nat)
.LTTextLine.is_empty: (self: layout.LTTextLine) -> Bool

.LTTextLineHorizontal: ClassType
.LTTextLineHorizontal <: .LTTextLine
.LTTextLineHorizontal._x1: Float
.LTTextLineHorizontal.__call__: (word_margin: Float) -> layout.LTTextLineHorizontal
.LTTextLineHorizontal.add: (self: layout.LTTextLineHorizontal, obj: layout.LTComponent) -> NoneType
.LTTextLineHorizontal.find_neighbors: |Type_16271 <: Structural({.find = (self: Obj, ?28523) -> ?28524}), Type_28523: Type, Type_28524: Type|(self: layout.LTTextLineHorizontal, plane: Type_16271, ratio: Float) -> global::List!(layout.LTTextLine, _: Nat)
.LTTextLineHorizontal._is_left_aligned_with: (self: layout.LTTextLineHorizontal, other: layout.LTComponent, tolerance: Float := Float) -> Bool
.LTTextLineHorizontal._is_right_aligned_with: (self: layout.LTTextLineHorizontal, other: layout.LTComponent, tolerance: Float := Float) -> Bool
.LTTextLineHorizontal._is_centrally_aligned_with: (self: layout.LTTextLineHorizontal, other: layout.LTComponent, tolerance: Float := Float) -> Bool
.LTTextLineHorizontal._is_same_height_as: (self: layout.LTTextLineHorizontal, other: layout.LTComponent, tolerance: Float := Float) -> Bool

.LTTextLineVertical: ClassType
.LTTextLineVertical <: .LTTextLine
.LTTextLineVertical._y0: Float
.LTTextLineVertical.__call__: (word_margin: Float) -> layout.LTTextLineVertical
.LTTextLineVertical.add: (self: layout.LTTextLineVertical, obj: layout.LTComponent) -> NoneType
.LTTextLineVertical.find_neighbors: |Type_28634: Type, Type_16293 <: Structural({.find = (self: Obj, ?28634) -> ?28635}), Type_28635: Type|(self: layout.LTTextLineVertical, plane: Type_16293, ratio: Float) -> global::List!(layout.LTTextLine, _: Nat)
.LTTextLineVertical._is_lower_aligned_with: (self: layout.LTTextLineVertical, other: layout.LTComponent, tolerance: Float := Float) -> Bool
.LTTextLineVertical._is_upper_aligned_with: (self: layout.LTTextLineVertical, other: layout.LTComponent, tolerance: Float := Float) -> Bool
.LTTextLineVertical._is_centrally_aligned_with: (self: layout.LTTextLineVertical, other: layout.LTComponent, tolerance: Float := Float) -> Bool
.LTTextLineVertical._is_same_width_as: (self: layout.LTTextLineVertical, other: layout.LTComponent, tolerance: Float) -> Bool

.LTTextBox: ClassType
.LTTextBox <: Never
.LTTextBox.index: Int
.LTTextBox.__call__: () -> layout.LTTextBox
.LTTextBox.__repr__: (self: layout.LTTextBox) -> Str
.LTTextBox.get_writing_mode: (self: layout.LTTextBox) -> Str

.LTTextBoxHorizontal: ClassType
.LTTextBoxHorizontal <: .LTTextBox
.LTTextBoxHorizontal.analyze: (self: layout.LTTextBoxHorizontal, laparams: layout.LAParams) -> NoneType
.LTTextBoxHorizontal.get_writing_mode: (self: layout.LTTextBoxHorizontal) -> Str

.LTTextBoxVertical: ClassType
.LTTextBoxVertical <: .LTTextBox
.LTTextBoxVertical.analyze: (self: layout.LTTextBoxVertical, laparams: layout.LAParams) -> NoneType
.LTTextBoxVertical.get_writing_mode: (self: layout.LTTextBoxVertical) -> Str

.TextGroupElement: Never
.LTTextGroup: ClassType
.LTTextGroup <: Never
.LTTextGroup.__call__: Never

.LTTextGroupLRTB: ClassType
.LTTextGroupLRTB <: .LTTextGroup
.LTTextGroupLRTB.analyze: (self: layout.LTTextGroupLRTB, laparams: layout.LAParams) -> NoneType

.LTTextGroupTBRL: ClassType
.LTTextGroupTBRL <: .LTTextGroup
.LTTextGroupTBRL.analyze: (self: layout.LTTextGroupTBRL, laparams: layout.LAParams) -> NoneType

.LTLayoutContainer: ClassType
.LTLayoutContainer <: Never
.LTLayoutContainer.groups: Never
.LTLayoutContainer.__call__: (bbox: Obj) -> layout.LTLayoutContainer
.LTLayoutContainer.group_objects: (self: layout.LTLayoutContainer, laparams: layout.LAParams, objs: global::Iterable(layout.LTComponent)) -> global::Iterator(layout.LTTextLine)
.LTLayoutContainer.group_textlines: (self: layout.LTLayoutContainer, laparams: layout.LAParams, lines: global::Iterable(layout.LTTextLine)) -> global::Iterator(layout.LTTextBox)
.LTLayoutContainer.group_textboxes: (self: layout.LTLayoutContainer, laparams: layout.LAParams, boxes: global::Sequence(layout.LTTextBox)) -> global::List!(layout.LTTextGroup, _: Nat)
.LTLayoutContainer.analyze: (self: layout.LTLayoutContainer, laparams: layout.LAParams) -> NoneType

.LTFigure: ClassType
.LTFigure <: .LTLayoutContainer
.LTFigure.name: Str
.LTFigure.matrix: Never
.LTFigure.__call__: (name: Str, bbox: Obj, matrix: Obj) -> layout.LTFigure
.LTFigure.__repr__: (self: layout.LTFigure) -> Str
.LTFigure.analyze: (self: layout.LTFigure, laparams: layout.LAParams) -> NoneType

.LTPage: ClassType
.LTPage <: .LTLayoutContainer
.LTPage.pageid: Int
.LTPage.rotate: Float
.LTPage.__call__: (pageid: Int, bbox: Obj, rotate: Float := Float) -> layout.LTPage
.LTPage.__repr__: (self: layout.LTPage) -> Str


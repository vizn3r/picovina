##[pylyzer] failed /home/vizn3r/dev/dano-picovina/pdf/venv/lib/python3.12/site-packages/pdfminer/cmapdb.py 1748113092 15358

.gzip: Never

.logging: Never

.os: Never

.os: Never

.pickle: Never

.struct: Never

.sys: Never

.___v_desugar_1: Never
.Any: Never
.BinaryIO: Never
.Dict: Never
.Iterable: Never
.Iterator: Never
.List: Never
.MutableMapping: Never
.Optional: Never
.Set: Never
.TextIO: Never
.Tuple: Never
.Union: Never
.cast: Never
.___v_desugar_2 = pyimport "encodingdb"
.encodingdb = pyimport "encodingdb"
.name2unicode: (name: Str) -> Str
.___v_desugar_3 = pyimport "pdfexceptions"
.pdfexceptions = pyimport "pdfexceptions"
.PDFException: {pdfminer.pdfexceptions.PDFException}
.PDFTypeError: {pdfminer.pdfexceptions.PDFTypeError}
.___v_desugar_4 = pyimport "psexceptions"
.psexceptions = pyimport "psexceptions"
.PSEOF: {pdfminer.psexceptions.PSEOF}
.PSSyntaxError: {pdfminer.psexceptions.PSSyntaxError}
.___v_desugar_5 = pyimport "psparser"
.psparser = pyimport "psparser"
.KWD: Never
.PSKeyword: {psparser.PSKeyword}
.PSLiteral: {psparser.PSLiteral}
.PSStackParser: {psparser.PSStackParser}
.literal_name: (x: Obj) -> Str
.___v_desugar_6 = pyimport "utils"
.utils = pyimport "utils"
.choplist: Never
.nunpack: (s: global::Bytes, default: Int := Int and Int) -> Int
.log: Never
.CMapError: ClassType
pdfminer = pyimport "pdfminer"
.CMapError <: pdfminer.pdfexceptions.PDFException

.CMapBase: ClassType
.CMapBase.attrs: Never
.CMapBase.__call__: (**kwargs := Obj) -> cmapdb.CMapBase
.CMapBase.debug: {0}
.CMapBase.is_vertical: (self: cmapdb.CMapBase) -> Bool
.CMapBase.set_attr: (self: cmapdb.CMapBase, k: Str, v: Obj) -> NoneType
.CMapBase.add_code2cid: (self: cmapdb.CMapBase, code: Str, cid: Int) -> NoneType
.CMapBase.add_cid2unichr: (self: cmapdb.CMapBase, cid: Int, code: psparser.PSLiteral or Int or global::Bytes) -> NoneType
.CMapBase.use_cmap: (self: cmapdb.CMapBase, cmap: cmapdb.CMapBase) -> NoneType
.CMapBase.decode: (self: cmapdb.CMapBase, code: global::Bytes) -> global::Iterable(Int)

.CMap: ClassType
cmapdb = pyimport "cmapdb"
.CMap <: Base
.CMap.code2cid: Never
.CMap.__call__: (**kwargs := Int or Str) -> cmapdb.CMap
.CMap.__repr__: (self: cmapdb.CMap) -> Str
.CMap.use_cmap: (self: cmapdb.CMap, cmap: cmapdb.CMapBase) -> NoneType
.CMap.decode: (self: cmapdb.CMap, code: global::Bytes) -> global::Iterator(Int)
.CMap.dump: (self: cmapdb.CMap, out: Obj := Obj, code2cid: NoneType or global::Dict!({Int: Obj}) := NoneType or global::Dict!({Int: Obj}), code: global::HomogenousTuple(Int) := global::HomogenousTuple(Int)) -> NoneType

.IdentityCMap: ClassType
.IdentityCMap <: .CMapBase
.IdentityCMap.decode: (self: cmapdb.IdentityCMap, code: global::Bytes) -> global::HomogenousTuple(Int)

.IdentityCMapByte: ClassType
.IdentityCMapByte <: .IdentityCMap
.IdentityCMapByte.decode: (self: cmapdb.IdentityCMapByte, code: global::Bytes) -> global::HomogenousTuple(Int)

.UnicodeMap: ClassType
.UnicodeMap <: .CMapBase
.UnicodeMap.cid2unichr: Never
.UnicodeMap.__call__: (**kwargs := Int or Str) -> cmapdb.UnicodeMap
.UnicodeMap.__repr__: (self: cmapdb.UnicodeMap) -> Str
.UnicodeMap.get_unichr: (self: cmapdb.UnicodeMap, cid: Int) -> Str
.UnicodeMap.dump: (self: cmapdb.UnicodeMap, out: Obj := Obj) -> NoneType

.IdentityUnicodeMap: ClassType
.IdentityUnicodeMap <: .UnicodeMap
.IdentityUnicodeMap.get_unichr: (self: cmapdb.IdentityUnicodeMap, cid: Int) -> Str

.FileCMap: ClassType
.FileCMap <: .CMap
.FileCMap.add_code2cid: (self: cmapdb.FileCMap, code: Str, cid: Int) -> NoneType

.FileUnicodeMap: ClassType
.FileUnicodeMap <: .UnicodeMap
.FileUnicodeMap.add_cid2unichr: (self: cmapdb.FileUnicodeMap, cid: Int, code: psparser.PSLiteral or Int or global::Bytes) -> NoneType

.PyCMap: ClassType
.PyCMap <: .CMap
.PyCMap.code2cid: Never
.PyCMap.__call__: (name: Str, module: Obj) -> cmapdb.PyCMap

.PyUnicodeMap: ClassType
.PyUnicodeMap <: .UnicodeMap
.PyUnicodeMap.__call__: (name: Str, module: Obj, vertical: Bool) -> cmapdb.PyUnicodeMap

.CMapDB: ClassType
.CMapDB.__call__: () -> cmapdb.CMapDB
.CMapDB._cmap_cache: global::Dict!({Str: cmapdb.PyCMap})
.CMapDB._umap_cache: global::Dict!({Str: global::List!(cmapdb.PyUnicodeMap, _: Nat)})
.CMapDB._load_data: (cls: Obj, name: Str) -> Never
.CMapDB.get_cmap: |Self <: global::Indexable(?K, ?V), K: Type, Type_18740: Type, Type_18289 <: Structural({._cmap_cache = ?Self; ._load_data = (self: Obj, ?18740) -> ?18741}), V: Type, Type_18741: Type|(cls: Type_18289, name: Str) -> cmapdb.CMapBase
.CMapDB.get_unicode_map: |Type_18290 <: Structural({._umap_cache = ?Self and ?18805; ._load_data = (self: Obj, ?O) -> ?18796}), K: Type, V: Type, Type_18796: Type, Self <: global::Indexable(?K, ?V), Type_18805: Type, O: Type|(cls: Type_18290, name: Str, vertical: Bool := {False} and Bool) -> cmapdb.UnicodeMap

.CMapParser: ClassType
.CMapParser <: Never
.CMapParser._in_cmap: Never
.CMapParser.cmap: .CMapBase
.CMapParser._warnings: global::Set!(Str, _: Nat)
.CMapParser.__call__: (cmap: cmapdb.CMapBase, fp: Obj) -> cmapdb.CMapParser
.CMapParser.run: (self: cmapdb.CMapParser) -> NoneType
.CMapParser.KEYWORD_BEGINCMAP: Never
.CMapParser.KEYWORD_ENDCMAP: Never
.CMapParser.KEYWORD_USECMAP: Never
.CMapParser.KEYWORD_DEF: Never
.CMapParser.KEYWORD_BEGINCODESPACERANGE: Never
.CMapParser.KEYWORD_ENDCODESPACERANGE: Never
.CMapParser.KEYWORD_BEGINCIDRANGE: Never
.CMapParser.KEYWORD_ENDCIDRANGE: Never
.CMapParser.KEYWORD_BEGINCIDCHAR: Never
.CMapParser.KEYWORD_ENDCIDCHAR: Never
.CMapParser.KEYWORD_BEGINBFRANGE: Never
.CMapParser.KEYWORD_ENDBFRANGE: Never
.CMapParser.KEYWORD_BEGINBFCHAR: Never
.CMapParser.KEYWORD_ENDBFCHAR: Never
.CMapParser.KEYWORD_BEGINNOTDEFRANGE: Never
.CMapParser.KEYWORD_ENDNOTDEFRANGE: Never
.CMapParser.do_keyword: (self: cmapdb.CMapParser, pos: Int, token: psparser.PSKeyword) -> NoneType
.CMapParser._warn_once: (self: cmapdb.CMapParser, msg: Str) -> NoneType


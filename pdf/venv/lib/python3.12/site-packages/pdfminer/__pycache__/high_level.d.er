##[pylyzer] failed /home/vizn3r/dev/dano-picovina/pdf/venv/lib/python3.12/site-packages/pdfminer/high_level.py 1748113092 7527

.logging: Never

.sys: Never

.___v_desugar_1: Never
.StringIO: Never
.___v_desugar_2: Never
.Any: Never
.BinaryIO: Never
.Container: Never
.Iterator: Never
.Optional: Never
.cast: Never
.___v_desugar_3 = pyimport "converter"
.converter = pyimport "converter"
.HOCRConverter: {pdfminer.converter.HOCRConverter}
.HTMLConverter: {pdfminer.converter.HTMLConverter}
.PDFPageAggregator: {pdfminer.converter.PDFPageAggregator}
.TextConverter: {pdfminer.converter.TextConverter}
.XMLConverter: {pdfminer.converter.XMLConverter}
.___v_desugar_4 = pyimport "image"
.image = pyimport "image"
.ImageWriter: {pdfminer.image.ImageWriter}
.___v_desugar_5 = pyimport "layout"
.layout = pyimport "layout"
.LAParams: {layout.LAParams}
.LTPage: {layout.LTPage}
.___v_desugar_6 = pyimport "pdfdevice"
.pdfdevice = pyimport "pdfdevice"
.PDFDevice: Never
.TagExtractor: {pdfdevice.TagExtractor}
.___v_desugar_7 = pyimport "pdfexceptions"
.pdfexceptions = pyimport "pdfexceptions"
.PDFValueError: {pdfminer.pdfexceptions.PDFValueError}
.___v_desugar_8 = pyimport "pdfinterp"
.pdfinterp = pyimport "pdfinterp"
.PDFPageInterpreter: {pdfinterp.PDFPageInterpreter}
.PDFResourceManager: {pdfinterp.PDFResourceManager}
.___v_desugar_9 = pyimport "pdfpage"
.pdfpage = pyimport "pdfpage"
.PDFPage: {pdfpage.PDFPage}
.___v_desugar_10 = pyimport "utils"
.utils = pyimport "utils"
.AnyIO: Never
.FileOrName: Never
.open_filename: Never
.extract_text_to_fp: (inf: Obj, outfp: Obj, output_type: Str := Str, codec: Str := Str, laparams: layout.LAParams or NoneType := layout.LAParams or NoneType, maxpages: Int := Int, page_numbers: NoneType or global::Container(Int) := NoneType or global::Container(Int), password: Str := Str, scale: Float := Float, rotation: Int := Int, layoutmode: Str := Str, output_dir: NoneType or Str := NoneType or Str, strip_control: Bool := Bool, debug: Bool := Bool, disable_caching: Bool := Bool, **kwargs := Obj) -> NoneType
.extract_text: (pdf_file: Obj, password: Str := Str, page_numbers: NoneType or global::Container(Int) := NoneType or global::Container(Int), maxpages: Int := Int, caching: Bool := Bool, codec: Str := Str, laparams: layout.LAParams or NoneType := layout.LAParams or NoneType) -> Str
.extract_pages: (pdf_file: Obj, password: Str := Str, page_numbers: NoneType or global::Container(Int) := NoneType or global::Container(Int), maxpages: Int := Int, caching: Bool := Bool, laparams: layout.LAParams or NoneType := layout.LAParams or NoneType) -> global::Iterator(layout.LTPage)

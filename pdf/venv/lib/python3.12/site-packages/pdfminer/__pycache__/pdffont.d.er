##[pylyzer] failed /home/vizn3r/dev/dano-picovina/pdf/venv/lib/python3.12/site-packages/pdfminer/pdffont.py 1748113092 38315
.logging: Never

.struct: Never

.___v_desugar_1: Never
.BytesIO: Never
.___v_desugar_2: Never
.TYPE_CHECKING: Never
.Any: Never
.BinaryIO: Never
.Dict: Never
.Iterable: Never
.Iterator: Never
.List: Never
.Mapping: Never
.Optional: Never
.Tuple: Never
.Union: Never
.cast: Never
.settings = pyimport "settings"

.___v_desugar_3 = pyimport "casting"
.casting = pyimport "casting"
.safe_float: (o: Obj) -> Float or NoneType
.safe_rect_list: (value: Obj) -> Never
.___v_desugar_4 = pyimport "cmapdb"
.cmapdb = pyimport "cmapdb"
.CMap: Never
.CMapBase: Never
.CMapDB: Never
.CMapParser: Never
.FileUnicodeMap: Never
.IdentityUnicodeMap: Never
.UnicodeMap: Never
.___v_desugar_5 = pyimport "encodingdb"
.encodingdb = pyimport "encodingdb"
.EncodingDB: {pdfminer.encodingdb.EncodingDB}
.name2unicode: (name: Str) -> Str
.___v_desugar_6 = pyimport "fontmetrics"
.fontmetrics = pyimport "fontmetrics"
.FONT_METRICS: Never
.___v_desugar_7 = pyimport "pdfexceptions"
.pdfexceptions = pyimport "pdfexceptions"
.PDFException: {pdfminer.pdfexceptions.PDFException}
.PDFKeyError: {pdfminer.pdfexceptions.PDFKeyError}
.PDFValueError: {pdfminer.pdfexceptions.PDFValueError}
.___v_desugar_8 = pyimport "pdftypes"
.pdftypes = pyimport "pdftypes"
.PDFStream: Never
.dict_value: Never
.int_value: (x: Obj) -> Int
.list_value: Never
.num_value: (x: Obj) -> Float
.resolve1: (x: Obj, default: Obj := Obj) -> Never
.resolve_all: (x: Obj, default: Obj := Obj) -> Never
.stream_value: (x: Obj) -> Never
.___v_desugar_9 = pyimport "psexceptions"
.psexceptions = pyimport "psexceptions"
.PSEOF: {pdfminer.psexceptions.PSEOF}
.___v_desugar_10 = pyimport "psparser"
.psparser = pyimport "psparser"
.KWD: Never
.LIT: Never
.PSKeyword: {psparser.PSKeyword}
.PSLiteral: {psparser.PSLiteral}
.PSStackParser: {psparser.PSStackParser}
.literal_name: (x: Obj) -> Str
.___v_desugar_11 = pyimport "utils"
.utils = pyimport "utils"
.Matrix: Never
.Point: Never
.Rect: Never
.apply_matrix_norm: (m: Obj, v: Obj) -> Never
.choplist: Never
.nunpack: (s: global::Bytes, default: Int := Int and Int) -> Int

.___v_desugar_12 = pyimport "pdfinterp"
.pdfinterp = pyimport "pdfinterp"
.PDFResourceManager: Never


.log: Never
.get_widths: (seq: global::Iterable(Obj)) -> global::Dict!({Int or Str: Float})
.get_widths2: Never
.FontMetricsDB: ClassType
.FontMetricsDB.__call__: () -> pdffont.FontMetricsDB
.FontMetricsDB.get_metrics: (cls: Obj, fontname: Str) -> global::Tuple([global::Dict!({Str: Obj}), global::Dict!({Str: Int})])

.Type1FontHeaderParser: ClassType
.Type1FontHeaderParser <: Never
.Type1FontHeaderParser._cid2unicode: Never
.Type1FontHeaderParser.__call__: (data: Obj) -> pdffont.Type1FontHeaderParser
.Type1FontHeaderParser.KEYWORD_BEGIN: Never
.Type1FontHeaderParser.KEYWORD_END: Never
.Type1FontHeaderParser.KEYWORD_DEF: Never
.Type1FontHeaderParser.KEYWORD_PUT: Never
.Type1FontHeaderParser.KEYWORD_DICT: Never
.Type1FontHeaderParser.KEYWORD_ARRAY: Never
.Type1FontHeaderParser.KEYWORD_READONLY: Never
.Type1FontHeaderParser.KEYWORD_FOR: Never
.Type1FontHeaderParser.get_encoding: (self: pdffont.Type1FontHeaderParser) -> global::Dict!({Int: Str})
.Type1FontHeaderParser.do_keyword: (self: pdffont.Type1FontHeaderParser, pos: Int, token: psparser.PSKeyword) -> NoneType

.NIBBLES: {Type_v_global_38532: global::Tuple([Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, NoneType, Str]) | Type_v_global_38532 == ("0", "1", "2", "3", "4", "5", "6", "7", ...)}
.IDENTITY_ENCODER: Never
.getdict: (data: global::Bytes) -> global::Dict!({Int: global::List!(Float, _: Nat)})
.CFFFont: ClassType
.CFFFont.subr_index: Never
.CFFFont.top_dict: Never
.CFFFont.charstring: Never
.CFFFont.gid2code: Never
.CFFFont.string_index: Never
.CFFFont.nglyphs: Never
.CFFFont.fp: Never
.CFFFont.name2gid: Never
.CFFFont.dict_index: Never
.CFFFont.name: Str
.CFFFont.code2gid: Never
.CFFFont.name_index: Never
.CFFFont.gid2name: Never
.CFFFont.__call__: (name: Str, fp: Obj) -> pdffont.CFFFont
.CFFFont.STANDARD_STRINGS: {Type_v_global_38552: global::Tuple([Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str, Str]) | Type_v_global_38552 == (".notdef", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", ...)}
.CFFFont.getstr: (self: pdffont.CFFFont, sid: Int) -> global::Bytes or Str

.TrueTypeFont: ClassType
.TrueTypeFont.fonttype: Never
.TrueTypeFont.name: Str
.TrueTypeFont.tables: Never
.TrueTypeFont.fp: Never
.TrueTypeFont.__call__: (name: Str, fp: Obj) -> pdffont.TrueTypeFont
.TrueTypeFont.create_unicode_map: (self: pdffont.TrueTypeFont) -> Never

.PDFFontError: ClassType
pdfminer = pyimport "pdfminer"
.PDFFontError <: pdfminer.pdfexceptions.PDFException

.PDFUnicodeNotDefined: ClassType
pdffont = pyimport "pdffont"
.PDFUnicodeNotDefined <: .PDFFontError

.LITERAL_STANDARD_ENCODING: Never
.LITERAL_TYPE1C: Never
.FontWidthDict: Never
.PDFFont: ClassType
.PDFFont.flags: Never
.PDFFont.leading: Never
.PDFFont.italic_angle: Never
.PDFFont.descent: Never
.PDFFont.widths: Never
.PDFFont.default_width: Never
.PDFFont.descriptor: Never
.PDFFont.ascent: Never
.PDFFont.fontname: Never
.PDFFont.bbox: Never
.PDFFont.__call__: Never
.PDFFont.__repr__: (self: pdffont.PDFFont) -> Str
.PDFFont.is_vertical: (self: pdffont.PDFFont) -> Bool
.PDFFont.is_multibyte: (self: pdffont.PDFFont) -> Bool
.PDFFont.decode: (self: pdffont.PDFFont, Bytes: global::Bytes) -> global::Iterable(Int)
.PDFFont.get_ascent: (self: pdffont.PDFFont) -> Float
.PDFFont.get_descent: (self: pdffont.PDFFont) -> Float
.PDFFont.get_width: (self: pdffont.PDFFont) -> Float
.PDFFont.get_height: (self: pdffont.PDFFont) -> Float
.PDFFont.char_width: (self: pdffont.PDFFont, cid: Int) -> Float
.PDFFont.char_disp: (self: pdffont.PDFFont, cid: Int) -> Float or global::Tuple([Float or NoneType, Float])
.PDFFont.string_width: (self: pdffont.PDFFont, s: global::Bytes) -> Float
.PDFFont.to_unichr: (self: pdffont.PDFFont, cid: Int) -> Str
.PDFFont._parse_bbox: Never

.PDFSimpleFont: ClassType
.PDFSimpleFont <: .PDFFont
.PDFSimpleFont.unicode_map: Never
.PDFSimpleFont.__call__: Never
.PDFSimpleFont.to_unichr: (self: pdffont.PDFSimpleFont, cid: Int) -> Str

.PDFType1Font: ClassType
.PDFType1Font <: .PDFSimpleFont
.PDFType1Font.__call__: Never
.PDFType1Font.__repr__: (self: pdffont.PDFType1Font) -> Str

.PDFTrueTypeFont: ClassType
.PDFTrueTypeFont <: .PDFType1Font
.PDFTrueTypeFont.__repr__: (self: pdffont.PDFTrueTypeFont) -> Str

.PDFType3Font: ClassType
.PDFType3Font <: .PDFSimpleFont
.PDFType3Font.matrix: Never
.PDFType3Font.__call__: Never
.PDFType3Font.__repr__: (self: pdffont.PDFType3Font) -> Str

.PDFCIDFont: ClassType
.PDFCIDFont <: .PDFFont
.PDFCIDFont.cmap: Never
.PDFCIDFont.cidcoding: Never
.PDFCIDFont.default_disp: Never
.PDFCIDFont.vertical: Never
.PDFCIDFont.cidsysteminfo: Never
.PDFCIDFont.unicode_map: Never
.PDFCIDFont.__call__: Never
.PDFCIDFont.get_cmap_from_spec: Never
.PDFCIDFont._get_cmap_name: Never
.PDFCIDFont.__repr__: (self: pdffont.PDFCIDFont) -> Str
.PDFCIDFont.is_vertical: (self: pdffont.PDFCIDFont) -> Bool
.PDFCIDFont.is_multibyte: (self: pdffont.PDFCIDFont) -> Bool
.PDFCIDFont.decode: (self: pdffont.PDFCIDFont, Bytes: global::Bytes) -> global::Iterable(Int)
.PDFCIDFont.char_disp: (self: pdffont.PDFCIDFont, cid: Int) -> Float or global::Tuple([Float or NoneType, Float])
.PDFCIDFont.to_unichr: (self: pdffont.PDFCIDFont, cid: Int) -> Str


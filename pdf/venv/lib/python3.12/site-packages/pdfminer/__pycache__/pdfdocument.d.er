##[pylyzer] failed /home/vizn3r/dev/dano-picovina/pdf/venv/lib/python3.12/site-packages/pdfminer/pdfdocument.py 1748113092 37593
.itertools: Never

.logging: Never

.re: Never

.struct: Never

.___v_desugar_1: Never
.md5: Never
.sha256: Never
.sha384: Never
.sha512: Never
.___v_desugar_2: Never
.Any: Never
.Callable: Never
.Dict: Never
.Iterable: Never
.Iterator: Never
.KeysView: Never
.List: Never
.Optional: Never
.Sequence: Never
.Tuple: Never
.Type: Never
.Union: Never
.cast: Never
.___v_desugar_3 = pyimport "__init__"
.__init__ = pyimport "__init__"
.default_backend: () -> Never
.algorithms = pyimport "algorithms"
.modes = pyimport "modes"
.___v_desugar_4 = pyimport "__init__"

.Cipher: Never

.settings = pyimport "settings"

.___v_desugar_5 = pyimport "arcfour"
.arcfour = pyimport "arcfour"
.Arcfour: {pdfminer.arcfour.Arcfour}
.___v_desugar_6 = pyimport "casting"
.casting = pyimport "casting"
.safe_int: (o: Obj) -> NoneType or Int
.___v_desugar_7 = pyimport "data_structures"
.data_structures = pyimport "data_structures"
.NumberTree: Never
.___v_desugar_8 = pyimport "pdfexceptions"
.pdfexceptions = pyimport "pdfexceptions"
.PDFException: {pdfminer.pdfexceptions.PDFException}
.PDFKeyError: {pdfminer.pdfexceptions.PDFKeyError}
.PDFObjectNotFound: {pdfminer.pdfexceptions.PDFObjectNotFound}
.PDFTypeError: {pdfminer.pdfexceptions.PDFTypeError}
.___v_desugar_9 = pyimport "pdfparser"
.pdfparser = pyimport "pdfparser"
.PDFParser: Never
.PDFStreamParser: Never
.PDFSyntaxError: Never
.___v_desugar_10 = pyimport "pdftypes"
.pdftypes = pyimport "pdftypes"
.DecipherCallable: {pdftypes.DecipherCallable}
.PDFStream: {pdftypes.PDFStream}
.decipher_all: (decipher: pdftypes.DecipherCallable, objid: Int, genno: Int, x: Obj) -> Never
.dict_value: Never
.int_value: (x: Obj) -> Int
.list_value: Never
.str_value: (x: Obj) -> global::Bytes
.stream_value: (x: Obj) -> Never
.uint_value: (x: Obj, n_bits: Int) -> Int
.___v_desugar_11 = pyimport "psexceptions"
.psexceptions = pyimport "psexceptions"
.PSEOF: {pdfminer.psexceptions.PSEOF}
.___v_desugar_12 = pyimport "psparser"
.psparser = pyimport "psparser"
.KWD: Never
.LIT: Never
.literal_name: (x: Obj) -> Str
.___v_desugar_13 = pyimport "utils"
.utils = pyimport "utils"
.choplist: Never
.decode_text: (s: global::Bytes) -> Str
.format_int_alpha: (value: Int) -> Str
.format_int_roman: (value: Int) -> Str
.nunpack: (s: global::Bytes, default: Int := Int and Int) -> Int
.unpad_aes: (padded: global::Bytes) -> global::Bytes
.log: Never
.PDFNoValidXRef: ClassType
.PDFNoValidXRef <: Never

.PDFNoValidXRefWarning: ClassType
.PDFNoValidXRefWarning <: global::SyntaxWarning

.PDFNoOutlines: ClassType
pdfminer = pyimport "pdfminer"
.PDFNoOutlines <: pdfminer.pdfexceptions.PDFException

.PDFNoPageLabels: ClassType
.PDFNoPageLabels <: pdfminer.pdfexceptions.PDFException

.PDFDestinationNotFound: ClassType
.PDFDestinationNotFound <: pdfminer.pdfexceptions.PDFException

.PDFEncryptionError: ClassType
.PDFEncryptionError <: pdfminer.pdfexceptions.PDFException

.PDFPasswordIncorrect: ClassType
pdfdocument = pyimport "pdfdocument"
.PDFPasswordIncorrect <: .PDFEncryptionError

.PDFEncryptionWarning: ClassType
.PDFEncryptionWarning <: global::UserWarning

.PDFTextExtractionNotAllowedWarning: ClassType
.PDFTextExtractionNotAllowedWarning <: global::UserWarning

.PDFTextExtractionNotAllowed: ClassType
.PDFTextExtractionNotAllowed <: .PDFEncryptionError

.LITERAL_OBJSTM: Never
.LITERAL_XREF: Never
.LITERAL_CATALOG: Never
.PDFBaseXRef: ClassType
.PDFBaseXRef.__call__: () -> pdfdocument.PDFBaseXRef
.PDFBaseXRef.get_trailer: Never
.PDFBaseXRef.get_objids: (self: pdfdocument.PDFBaseXRef) -> global::Iterable(Int)
.PDFBaseXRef.get_pos: (self: pdfdocument.PDFBaseXRef, objid: Int) -> global::Tuple([NoneType or Int, Int, Int])
.PDFBaseXRef.load: (self: pdfdocument.PDFBaseXRef, parser: Obj) -> NoneType

.PDFXRef: ClassType
.PDFXRef <: .PDFBaseXRef
.PDFXRef.offsets: Never
.PDFXRef.trailer: Never
.PDFXRef.__call__: () -> pdfdocument.PDFXRef
.PDFXRef.__repr__: (self: pdfdocument.PDFXRef) -> Str
.PDFXRef.load: (self: pdfdocument.PDFXRef, parser: Obj) -> NoneType
.PDFXRef.load_trailer: (self: pdfdocument.PDFXRef, parser: Obj) -> NoneType
.PDFXRef.get_trailer: Never
.PDFXRef.get_objids: (self: pdfdocument.PDFXRef) -> Never
.PDFXRef.get_pos: (self: pdfdocument.PDFXRef, objid: Int) -> global::Tuple([NoneType or Int, Int, Int])

.PDFXRefFallback: ClassType
.PDFXRefFallback <: .PDFXRef
.PDFXRefFallback.__repr__: (self: pdfdocument.PDFXRefFallback) -> Str
.PDFXRefFallback.PDFOBJ_CUE: Never
.PDFXRefFallback.load: (self: pdfdocument.PDFXRefFallback, parser: Obj) -> NoneType

.PDFXRefStream: ClassType
.PDFXRefStream <: .PDFBaseXRef
.PDFXRefStream.fl1: Never
.PDFXRefStream.fl2: Never
.PDFXRefStream.data: Never
.PDFXRefStream.entlen: Never
.PDFXRefStream.fl3: Never
.PDFXRefStream.ranges: Never
.PDFXRefStream.__call__: () -> pdfdocument.PDFXRefStream
.PDFXRefStream.__repr__: (self: pdfdocument.PDFXRefStream) -> Str
.PDFXRefStream.load: (self: pdfdocument.PDFXRefStream, parser: Obj) -> NoneType
.PDFXRefStream.get_trailer: Never
.PDFXRefStream.get_objids: (self: pdfdocument.PDFXRefStream) -> global::Iterator(Int)
.PDFXRefStream.get_pos: (self: pdfdocument.PDFXRefStream, objid: Int) -> global::Tuple([NoneType or Int, Int, Int])

.PDFStandardSecurityHandler: ClassType
.PDFStandardSecurityHandler.docid: Never
.PDFStandardSecurityHandler.password: Str
.PDFStandardSecurityHandler.param: Never
.PDFStandardSecurityHandler.__call__: Never
.PDFStandardSecurityHandler.PASSWORD_PADDING: Never
.PDFStandardSecurityHandler.supported_revisions: global::HomogenousTuple(Int)
.PDFStandardSecurityHandler.init: (self: pdfdocument.PDFStandardSecurityHandler) -> NoneType
.PDFStandardSecurityHandler.init_params: (self: pdfdocument.PDFStandardSecurityHandler) -> NoneType
.PDFStandardSecurityHandler.init_key: (self: pdfdocument.PDFStandardSecurityHandler) -> NoneType
.PDFStandardSecurityHandler.is_printable: (self: pdfdocument.PDFStandardSecurityHandler) -> Bool
.PDFStandardSecurityHandler.is_modifiable: (self: pdfdocument.PDFStandardSecurityHandler) -> Bool
.PDFStandardSecurityHandler.is_extractable: (self: pdfdocument.PDFStandardSecurityHandler) -> Bool
.PDFStandardSecurityHandler.compute_u: (self: pdfdocument.PDFStandardSecurityHandler, key: global::Bytes) -> global::Bytes
.PDFStandardSecurityHandler.compute_encryption_key: (self: pdfdocument.PDFStandardSecurityHandler, password: global::Bytes) -> global::Bytes
.PDFStandardSecurityHandler.authenticate: (self: pdfdocument.PDFStandardSecurityHandler, password: Str) -> NoneType or global::Bytes
.PDFStandardSecurityHandler.authenticate_user_password: (self: pdfdocument.PDFStandardSecurityHandler, password: global::Bytes) -> NoneType or global::Bytes
.PDFStandardSecurityHandler.verify_encryption_key: (self: pdfdocument.PDFStandardSecurityHandler, key: global::Bytes) -> Bool
.PDFStandardSecurityHandler.authenticate_owner_password: (self: pdfdocument.PDFStandardSecurityHandler, password: global::Bytes) -> NoneType or global::Bytes
.PDFStandardSecurityHandler.decrypt: Never
.PDFStandardSecurityHandler.decrypt_rc4: (self: pdfdocument.PDFStandardSecurityHandler, objid: Int, genno: Int, data: global::Bytes) -> global::Bytes

.PDFStandardSecurityHandlerV4: ClassType
.PDFStandardSecurityHandlerV4 <: .PDFStandardSecurityHandler
.PDFStandardSecurityHandlerV4.supported_revisions: global::HomogenousTuple(Int)
.PDFStandardSecurityHandlerV4.init_params: (self: pdfdocument.PDFStandardSecurityHandlerV4) -> NoneType
.PDFStandardSecurityHandlerV4.get_cfm: (self: pdfdocument.PDFStandardSecurityHandlerV4, name: Str) -> NoneType or (Int, Int, global::Bytes) -> global::Bytes
.PDFStandardSecurityHandlerV4.decrypt: Never
.PDFStandardSecurityHandlerV4.decrypt_identity: (self: pdfdocument.PDFStandardSecurityHandlerV4, objid: Int, genno: Int, data: global::Bytes) -> global::Bytes
.PDFStandardSecurityHandlerV4.decrypt_aes128: (self: pdfdocument.PDFStandardSecurityHandlerV4, objid: Int, genno: Int, data: global::Bytes) -> global::Bytes

.PDFStandardSecurityHandlerV5: ClassType
.PDFStandardSecurityHandlerV5 <: .PDFStandardSecurityHandlerV4
.PDFStandardSecurityHandlerV5.supported_revisions: global::Tuple([{5}, {6}])
.PDFStandardSecurityHandlerV5.init_params: (self: pdfdocument.PDFStandardSecurityHandlerV5) -> NoneType
.PDFStandardSecurityHandlerV5.get_cfm: (self: pdfdocument.PDFStandardSecurityHandlerV5, name: Str) -> NoneType or (Int, Int, global::Bytes) -> global::Bytes
.PDFStandardSecurityHandlerV5.authenticate: (self: pdfdocument.PDFStandardSecurityHandlerV5, password: Str) -> NoneType or global::Bytes
.PDFStandardSecurityHandlerV5._normalize_password: (self: pdfdocument.PDFStandardSecurityHandlerV5, password: Str) -> global::Bytes
.PDFStandardSecurityHandlerV5._password_hash: (self: pdfdocument.PDFStandardSecurityHandlerV5, password: global::Bytes, salt: global::Bytes, vector: NoneType or global::Bytes := {None} and NoneType or global::Bytes) -> global::Bytes
.PDFStandardSecurityHandlerV5._r5_password: (self: pdfdocument.PDFStandardSecurityHandlerV5, password: global::Bytes, salt: global::Bytes, vector: NoneType or global::Bytes := NoneType or global::Bytes) -> global::Bytes
.PDFStandardSecurityHandlerV5._r6_password: (self: pdfdocument.PDFStandardSecurityHandlerV5, password: global::Bytes, salt: global::Bytes, vector: NoneType or global::Bytes := NoneType or global::Bytes) -> global::Bytes
.PDFStandardSecurityHandlerV5._bytes_mod_3: (input_bytes: global::Bytes) -> Int
.PDFStandardSecurityHandlerV5._aes_cbc_encrypt: (self: pdfdocument.PDFStandardSecurityHandlerV5, key: global::Bytes, iv: global::Bytes, data: global::Bytes) -> global::Bytes
.PDFStandardSecurityHandlerV5.decrypt_aes256: (self: pdfdocument.PDFStandardSecurityHandlerV5, objid: Int, genno: Int, data: global::Bytes) -> global::Bytes

.PDFDocument: ClassType
.PDFDocument.is_modifiable: Never
.PDFDocument.decipher: Never
.PDFDocument.is_extractable: Never
.PDFDocument.catalog: Never
.PDFDocument.caching: Bool
.PDFDocument.encryption: Never
.PDFDocument.info: Never
.PDFDocument._parser: Never
.PDFDocument._parsed_objs: Never
.PDFDocument.is_printable: Never
.PDFDocument.xrefs: global::List!(pdfdocument.PDFBaseXRef, _: Nat)
.PDFDocument._cached_objs: Never
.PDFDocument.__call__: (parser: Obj, password: Str := Str, caching: Bool := Bool, fallback: Bool := Bool) -> pdfdocument.PDFDocument
.PDFDocument.security_handler_registry: Never
.PDFDocument.KEYWORD_OBJ: Never
.PDFDocument._initialize_password: (self: pdfdocument.PDFDocument, password: Str := Str) -> NoneType
.PDFDocument._getobj_objstm: (self: pdfdocument.PDFDocument, stream: pdftypes.PDFStream, index: Int, objid: Int) -> Obj
.PDFDocument._get_objects: (self: pdfdocument.PDFDocument, stream: pdftypes.PDFStream) -> global::Tuple([global::List!(Obj, _: Nat), Int])
.PDFDocument._getobj_parse: (self: pdfdocument.PDFDocument, pos: Int, objid: Int) -> Obj
.PDFDocument.getobj: (self: pdfdocument.PDFDocument, objid: Int) -> Obj
.PDFDocument.OutlineType: Never
.PDFDocument.get_outlines: Never
.PDFDocument.get_page_labels: (self: pdfdocument.PDFDocument) -> global::Iterator(Str)
.PDFDocument.lookup_name: (self: pdfdocument.PDFDocument, cat: Str, key: global::Bytes or Str) -> Never
.PDFDocument.get_dest: (self: pdfdocument.PDFDocument, name: global::Bytes or Str) -> Never
.PDFDocument.find_xref: (self: pdfdocument.PDFDocument, parser: Obj) -> Int
.PDFDocument.read_xref_from: (self: pdfdocument.PDFDocument, parser: Obj, start: Int, xrefs: global::List!(pdfdocument.PDFBaseXRef, _: Nat)) -> NoneType

.PageLabels: ClassType
.PageLabels <: Never
.PageLabels.labels : (self: pdfdocument.PageLabels) -> global::Iterator(Str)
.PageLabels.labels: global::Iterator(Str)
.PageLabels._format_page_label: (value: Int, style: Obj) -> Str

